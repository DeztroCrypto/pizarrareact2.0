{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\pizarrareact2.0\\\\client\\\\src\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport { click } from '@testing-library/user-event/dist/click';\nimport { useEffect, useRef, useState } from 'react';\nimport './styles.css';\nimport './w3.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar imdata;\nconst DrawingCanvas = props => {\n  _s();\n  let color = props.color;\n  let grosor = props.grosor;\n  let figura = props.figura;\n  let img = props.img;\n  let newImg = props.newImg;\n  let socket = props.socket;\n  let newWidth = props.newWidth;\n  let newHeight = props.newHeight;\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const startX = useRef(0);\n  const startY = useRef(0);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDrawingRect, setDrawingRect] = useState(false);\n  const [isDrawingCircle, setDrawingCircle] = useState(false);\n  const [isDrawingTriangle, setDrawingTriangle] = useState(false);\n  const [isDrawingImg, setDrawingImg] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const context = canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    });\n    context.lineCap = \"round\";\n    context.lineJoin = \"round\";\n    contextRef.current = context;\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    let imInit = contextRef.current.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    contextRef.current.putImageData(imInit, 0, 0);\n  }, [window.innerHeight, window.innerWidth]);\n  socket.on('drawing', onDrawingEvent);\n  socket.on('cargarCanvas', cargarCanvas);\n  function cargarCanvas(data) {\n    const imagen = new Image();\n    imagen.onload = () => {\n      contextRef.current.drawImage(imagen, 0, 0);\n    };\n    imagen.src = data.imgData;\n  }\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    if (figura === \"linea\") {\n      const {\n        offsetX,\n        offsetY\n      } = nativeEvent;\n      startX.current = offsetX;\n      startY.current = offsetY;\n      setIsDrawing(true);\n      nativeEvent.preventDefault();\n    }\n  };\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    if (!isDrawing) {\n      return;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    socketDrawLine(startX.current, startY.current, offsetX, offsetY, color, grosor, true);\n    startX.current = offsetX;\n    startY.current = offsetY;\n    nativeEvent.preventDefault();\n  };\n  const socketDrawLine = (x0, y0, x1, y1, color, grosor, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(x0, y0);\n    contextRef.current.lineTo(x1, y1);\n    contextRef.current.stroke();\n    contextRef.current.closePath();\n    const imgData = canvasRef.current.toDataURL();\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      x1,\n      y1,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawing = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n    if (!isDrawing) {\n      return;\n    }\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n  const startDrawRectangle = _ref4 => {\n    let {\n      nativeEvent\n    } = _ref4;\n    if (figura === \"cuadrado\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = canvasRef.current.toDataURL();\n      setDrawingRect(true);\n    }\n  };\n  const drawRectangle = _ref5 => {\n    let {\n      nativeEvent\n    } = _ref5;\n    if (!isDrawingRect) {\n      return;\n    }\n    const newPosX = nativeEvent.offsetX;\n    const newPosY = nativeEvent.offsetY;\n    const rectWidth = newPosX - startX.current;\n    const rectHeight = newPosY - startY.current;\n    socketDrawCuadrado(startX.current, startY.current, rectWidth, rectHeight, color, grosor, imdata, true);\n  };\n  const socketDrawCuadrado = (x0, y0, x1, y1, color, grosor, imgData, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    const imagen = new Image();\n    imagen.onload = () => {\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      contextRef.current.drawImage(imagen, 0, 0);\n      contextRef.current.strokeRect(x0, y0, x1, y1);\n    };\n    imagen.src = imgData;\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      x1,\n      y1,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawRect = _ref6 => {\n    let {\n      nativeEvent\n    } = _ref6;\n    if (!isDrawingRect) {\n      return;\n    }\n    setDrawingRect(false);\n  };\n  const startDrawCircle = _ref7 => {\n    let {\n      nativeEvent\n    } = _ref7;\n    if (figura === \"circulo\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = canvasRef.current.toDataURL();\n      setDrawingCircle(true);\n    }\n  };\n  const drawCircle = _ref8 => {\n    let {\n      nativeEvent\n    } = _ref8;\n    if (!isDrawingCircle) {\n      return;\n    }\n    const newPosX = nativeEvent.offsetX;\n    const newPosY = nativeEvent.offsetY;\n    const radioX = Math.abs(newPosX - startX.current);\n    const radioY = Math.abs(newPosY - startY.current);\n    const radioMax = Math.max(radioX, radioY);\n    socketDrawCicrulo(startX.current, startY.current, radioMax, color, grosor, imdata, true);\n  };\n  const socketDrawCicrulo = (x0, y0, radio, color, grosor, imgData, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    const imagen = new Image();\n    imagen.onload = () => {\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      contextRef.current.drawImage(imagen, 0, 0);\n      contextRef.current.beginPath();\n      contextRef.current.arc(x0, y0, radio, 0, 2 * Math.PI);\n      contextRef.current.stroke();\n    };\n    imagen.src = imgData;\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      radio,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawCircle = _ref9 => {\n    let {\n      nativeEvent\n    } = _ref9;\n    if (!isDrawingCircle) {\n      return;\n    }\n    setDrawingCircle(false);\n  };\n  const startDrawTriangle = _ref10 => {\n    let {\n      nativeEvent\n    } = _ref10;\n    if (figura === \"triangulo\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = canvasRef.current.toDataURL();\n      setDrawingTriangle(true);\n    }\n  };\n  const drawTriangle = _ref11 => {\n    let {\n      nativeEvent\n    } = _ref11;\n    if (!isDrawingTriangle) {\n      return;\n    }\n    const vertice = startX.current * 2 - nativeEvent.offsetX;\n    socketDrawTriangulo(startX.current, startY.current, nativeEvent.offsetX, vertice, nativeEvent.offsetY, color, grosor, imdata, true);\n  };\n  const socketDrawTriangulo = (x0, y0, x1, x2, altura, color, grosor, imgData, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    const imagen = new Image();\n    console.log(imgData);\n    imagen.onload = () => {\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      contextRef.current.drawImage(imagen, 0, 0);\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(x0, y0);\n      contextRef.current.lineTo(x1, altura);\n      contextRef.current.lineTo(x2, altura);\n      contextRef.current.closePath();\n      contextRef.current.stroke();\n    };\n    imagen.src = imgData;\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      x1,\n      x2,\n      altura,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawTriangle = _ref12 => {\n    let {\n      nativeEvent\n    } = _ref12;\n    if (!isDrawingTriangle) {\n      return;\n    }\n    setDrawingTriangle(false);\n  };\n  const drawImg = _ref13 => {\n    let {\n      nativeEvent\n    } = _ref13;\n    if (!isDrawingImg) {\n      return;\n    }\n    const offsetX = nativeEvent.offsetX;\n    const offsetY = nativeEvent.offsetY;\n    const x0 = offsetX + startX.current;\n    const y0 = offsetY + startY.current;\n    socketDrawImage(img, x0, y0, newWidth, newHeight, newImg, true);\n    nativeEvent.preventDefault();\n  };\n  const socketDrawImage = (img, x0, y0, newWidth, newHeight, srcNewImg, emit) => {\n    const BGimage = new Image();\n    const image = new Image();\n    BGimage.src = srcNewImg;\n    BGimage.onload = () => {\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      contextRef.current.drawImage(BGimage, 0, 0, canvasRef.current.width, canvasRef.current.height);\n    };\n    image.src = img;\n    image.onload = () => {\n      contextRef.current.drawImage(image, x0, y0, newWidth, newHeight);\n    };\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      img,\n      x0,\n      y0,\n      newWidth,\n      newHeight,\n      srcNewImg,\n      figura\n    });\n  };\n  const startDrawingImg = _ref14 => {\n    let {\n      nativeEvent\n    } = _ref14;\n    if (figura === \"img\") {\n      startX.current -= nativeEvent.offsetX;\n      startY.current -= nativeEvent.offsetY;\n      setDrawingImg(true);\n    }\n  };\n  const stopDrawImg = _ref15 => {\n    let {\n      nativeEvent\n    } = _ref15;\n    if (!isDrawingImg) {\n      return;\n    }\n    startX.current += nativeEvent.offsetX;\n    startY.current += nativeEvent.offsetY;\n    setDrawingImg(false);\n  };\n  function onDrawingEvent(data) {\n    switch (data.figura) {\n      case 'linea':\n        socketDrawLine(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor);\n        break;\n      case 'cuadrado':\n        socketDrawCuadrado(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor, data.imgData);\n        break;\n      case 'circulo':\n        socketDrawCicrulo(data.x0, data.y0, data.radio, data.color, data.grosor, data.imgData);\n        break;\n      case 'triangulo':\n        socketDrawTriangulo(data.x0, data.y0, data.x1, data.x2, data.altura, data.color, data.grosor, data.imgData);\n        break;\n      case 'img':\n        socketDrawImage(data.img, data.x0, data.y0, data.newWidth, data.newHeight, data.srcNewImg);\n    }\n  }\n  const funcionOnMouseDown = nativeEvent => {\n    startDrawing(nativeEvent);\n    startDrawRectangle(nativeEvent);\n    startDrawCircle(nativeEvent);\n    startDrawTriangle(nativeEvent);\n    startDrawingImg(nativeEvent);\n  };\n  const functionOnMouseMove = nativeEvent => {\n    draw(nativeEvent);\n    drawRectangle(nativeEvent);\n    drawCircle(nativeEvent);\n    drawTriangle(nativeEvent);\n    drawImg(nativeEvent);\n  };\n  const functionOnMouseUp = nativeEvent => {\n    stopDrawing(nativeEvent);\n    stopDrawRect(nativeEvent);\n    stopDrawCircle(nativeEvent);\n    stopDrawTriangle(nativeEvent);\n    stopDrawImg(nativeEvent);\n  };\n  const functionOnMouseOut = nativeEvent => {\n    stopDrawing(nativeEvent);\n    stopDrawRect(nativeEvent);\n    stopDrawCircle(nativeEvent);\n    stopDrawTriangle(nativeEvent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas-container\",\n    id: \"pizarra\",\n    ref: canvasRef,\n    onMouseDown: funcionOnMouseDown,\n    onMouseMove: functionOnMouseMove,\n    onMouseUp: functionOnMouseUp,\n    onMouseOut: functionOnMouseOut\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"6fA9rfAmPCvl291/MYBSMUFxDrc=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["click","useEffect","useRef","useState","imdata","DrawingCanvas","props","color","grosor","figura","img","newImg","socket","newWidth","newHeight","canvasRef","contextRef","startX","startY","isDrawing","setIsDrawing","isDrawingRect","setDrawingRect","isDrawingCircle","setDrawingCircle","isDrawingTriangle","setDrawingTriangle","isDrawingImg","setDrawingImg","canvas","current","width","clientWidth","height","clientHeight","context","getContext","willReadFrequently","lineCap","lineJoin","imInit","getImageData","putImageData","window","innerHeight","innerWidth","on","onDrawingEvent","cargarCanvas","data","imagen","Image","onload","drawImage","src","imgData","startDrawing","nativeEvent","offsetX","offsetY","preventDefault","draw","socketDrawLine","x0","y0","x1","y1","emit","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","toDataURL","stopDrawing","startDrawRectangle","drawRectangle","newPosX","newPosY","rectWidth","rectHeight","socketDrawCuadrado","clearRect","strokeRect","stopDrawRect","startDrawCircle","drawCircle","radioX","Math","abs","radioY","radioMax","max","socketDrawCicrulo","radio","arc","PI","stopDrawCircle","startDrawTriangle","drawTriangle","vertice","socketDrawTriangulo","x2","altura","console","log","stopDrawTriangle","drawImg","socketDrawImage","srcNewImg","BGimage","image","startDrawingImg","stopDrawImg","funcionOnMouseDown","functionOnMouseMove","functionOnMouseUp","functionOnMouseOut"],"sources":["D:/Web/pizarrareact2.0/client/src/DrawingCanvas.js"],"sourcesContent":["import { click } from '@testing-library/user-event/dist/click'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport './styles.css'\r\nimport './w3.css'\r\nvar imdata\r\n\r\nconst DrawingCanvas = (props) => {\r\n  let color = props.color\r\n  let grosor = props.grosor\r\n  let figura = props.figura\r\n  let img = props.img\r\n  let newImg = props.newImg\r\n  let socket = props.socket\r\n\r\n  let newWidth = props.newWidth\r\n  let newHeight = props.newHeight\r\n\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  const startX = useRef(0)\r\n  const startY = useRef(0)\r\n\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [isDrawingRect, setDrawingRect] = useState(false);\r\n  const [isDrawingCircle, setDrawingCircle] = useState(false);\r\n  const [isDrawingTriangle, setDrawingTriangle] = useState(false);\r\n  const [isDrawingImg, setDrawingImg] = useState(false);\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n\r\n    const context = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n    context.lineCap = \"round\";\r\n    context.lineJoin = \"round\";\r\n    contextRef.current = context;\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    let imInit = contextRef.current.getImageData(0, 0, canvas.width, canvas.height)\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n    contextRef.current.putImageData(imInit, 0, 0)\r\n  }, [window.innerHeight, window.innerWidth])\r\n\r\n  socket.on('drawing', onDrawingEvent)\r\n  socket.on('cargarCanvas', cargarCanvas)\r\n\r\n  function cargarCanvas(data) {\r\n    const imagen = new Image\r\n    imagen.onload = () => {\r\n      contextRef.current.drawImage(imagen, 0, 0)\r\n    }\r\n    imagen.src = data.imgData\r\n  }\r\n\r\n  const startDrawing = ({ nativeEvent }) => {\r\n    if (figura === \"linea\") {\r\n      const { offsetX, offsetY } = nativeEvent;\r\n      startX.current = offsetX;\r\n      startY.current = offsetY\r\n      setIsDrawing(true);\r\n      nativeEvent.preventDefault();\r\n    }\r\n  };\r\n  const draw = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    socketDrawLine(startX.current, startY.current, offsetX, offsetY, color, grosor, true)\r\n    startX.current = offsetX\r\n    startY.current = offsetY\r\n    nativeEvent.preventDefault();\r\n  };\r\n\r\n  const socketDrawLine = (x0, y0, x1, y1, color, grosor, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(x0, y0)\r\n    contextRef.current.lineTo(x1, y1)\r\n    contextRef.current.stroke()\r\n    contextRef.current.closePath()\r\n    const imgData = canvasRef.current.toDataURL()\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      x1,\r\n      y1,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawing = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    contextRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  const startDrawRectangle = ({ nativeEvent }) => {\r\n    if (figura === \"cuadrado\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = canvasRef.current.toDataURL()\r\n      setDrawingRect(true)\r\n    }\r\n  }\r\n\r\n  const drawRectangle = ({ nativeEvent }) => {\r\n    if (!isDrawingRect) {\r\n      return\r\n    }\r\n    const newPosX = nativeEvent.offsetX\r\n    const newPosY = nativeEvent.offsetY\r\n    const rectWidth = newPosX - startX.current\r\n    const rectHeight = newPosY - startY.current\r\n    socketDrawCuadrado(startX.current, startY.current, rectWidth, rectHeight, color, grosor, imdata, true)\r\n  }\r\n\r\n  const socketDrawCuadrado = (x0, y0, x1, y1, color, grosor, imgData, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    const imagen = new Image\r\n    imagen.onload = () => {\r\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      contextRef.current.drawImage(imagen, 0, 0)\r\n      contextRef.current.strokeRect(x0, y0, x1, y1)\r\n    }\r\n    imagen.src = imgData\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      x1,\r\n      y1,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawRect = ({ nativeEvent }) => {\r\n    if (!isDrawingRect) {\r\n      return\r\n    }\r\n    setDrawingRect(false)\r\n  }\r\n\r\n  const startDrawCircle = ({ nativeEvent }) => {\r\n    if (figura === \"circulo\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = canvasRef.current.toDataURL()\r\n      setDrawingCircle(true)\r\n    }\r\n  }\r\n\r\n  const drawCircle = ({ nativeEvent }) => {\r\n    if (!isDrawingCircle) {\r\n      return\r\n    }\r\n    const newPosX = nativeEvent.offsetX\r\n    const newPosY = nativeEvent.offsetY\r\n    const radioX = Math.abs(newPosX - startX.current)\r\n    const radioY = Math.abs(newPosY - startY.current)\r\n    const radioMax = Math.max(radioX, radioY)\r\n    socketDrawCicrulo(startX.current, startY.current, radioMax, color, grosor, imdata, true)\r\n  }\r\n\r\n  const socketDrawCicrulo = (x0, y0, radio, color, grosor, imgData, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    const imagen = new Image\r\n    imagen.onload = () => {\r\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      contextRef.current.drawImage(imagen, 0, 0)\r\n      contextRef.current.beginPath()\r\n      contextRef.current.arc(x0, y0, radio, 0, 2 * Math.PI)\r\n      contextRef.current.stroke()\r\n    }\r\n    imagen.src = imgData\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      radio,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawCircle = ({ nativeEvent }) => {\r\n    if (!isDrawingCircle) {\r\n      return\r\n    }\r\n    setDrawingCircle(false)\r\n  }\r\n\r\n  const startDrawTriangle = ({ nativeEvent }) => {\r\n    if (figura === \"triangulo\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = canvasRef.current.toDataURL()\r\n      setDrawingTriangle(true)\r\n    }\r\n  }\r\n\r\n  const drawTriangle = ({ nativeEvent }) => {\r\n    if (!isDrawingTriangle) {\r\n      return\r\n    }\r\n    const vertice = startX.current * 2 - nativeEvent.offsetX\r\n    socketDrawTriangulo(startX.current, startY.current, nativeEvent.offsetX, vertice, nativeEvent.offsetY, color, grosor, imdata, true)\r\n\r\n  }\r\n\r\n  const socketDrawTriangulo = (x0, y0, x1, x2, altura, color, grosor, imgData, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    const imagen = new Image\r\n    console.log(imgData)\r\n    imagen.onload = () => {\r\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      contextRef.current.drawImage(imagen, 0, 0)\r\n      contextRef.current.beginPath();\r\n      contextRef.current.moveTo(x0, y0);\r\n      contextRef.current.lineTo(x1, altura);\r\n      contextRef.current.lineTo(x2, altura);\r\n      contextRef.current.closePath();\r\n      contextRef.current.stroke();\r\n    }\r\n    imagen.src = imgData\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      x1,\r\n      x2,\r\n      altura,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawTriangle = ({ nativeEvent }) => {\r\n    if (!isDrawingTriangle) {\r\n      return\r\n    }\r\n    setDrawingTriangle(false)\r\n  }\r\n\r\n  const drawImg = ({ nativeEvent }) => {\r\n    if (!isDrawingImg) {\r\n      return\r\n    }\r\n    const offsetX = nativeEvent.offsetX\r\n    const offsetY = nativeEvent.offsetY\r\n    const x0 = offsetX + startX.current\r\n    const y0 = offsetY + startY.current\r\n    socketDrawImage(img, x0, y0, newWidth, newHeight, newImg, true)\r\n    nativeEvent.preventDefault();\r\n  }\r\n\r\n  const socketDrawImage = (img, x0, y0, newWidth, newHeight, srcNewImg, emit) => {\r\n    const BGimage = new Image\r\n    const image = new Image\r\n    BGimage.src = srcNewImg\r\n    BGimage.onload = () => {\r\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      contextRef.current.drawImage(BGimage, 0, 0, canvasRef.current.width, canvasRef.current.height)\r\n    }\r\n    image.src = img\r\n    image.onload = () => {\r\n      contextRef.current.drawImage(image, x0, y0, newWidth, newHeight)\r\n    }\r\n\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      img,\r\n      x0,\r\n      y0,\r\n      newWidth,\r\n      newHeight,\r\n      srcNewImg,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const startDrawingImg = ({ nativeEvent }) => {\r\n\r\n    if (figura === \"img\") {\r\n      startX.current -= nativeEvent.offsetX\r\n      startY.current -= nativeEvent.offsetY\r\n      setDrawingImg(true)\r\n    }\r\n  }\r\n  const stopDrawImg = ({ nativeEvent }) => {\r\n    if (!isDrawingImg) {\r\n      return\r\n    }\r\n    startX.current += nativeEvent.offsetX\r\n    startY.current += nativeEvent.offsetY\r\n    setDrawingImg(false)\r\n  }\r\n\r\n  function onDrawingEvent(data) {\r\n    switch (data.figura) {\r\n      case 'linea':\r\n        socketDrawLine(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor);\r\n        break;\r\n      case 'cuadrado':\r\n        socketDrawCuadrado(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor, data.imgData)\r\n        break;\r\n      case 'circulo':\r\n        socketDrawCicrulo(data.x0, data.y0, data.radio, data.color, data.grosor, data.imgData)\r\n        break;\r\n      case 'triangulo':\r\n        socketDrawTriangulo(data.x0, data.y0, data.x1, data.x2, data.altura, data.color, data.grosor, data.imgData)\r\n        break;\r\n      case 'img':\r\n        socketDrawImage(data.img, data.x0, data.y0, data.newWidth, data.newHeight, data.srcNewImg)\r\n    }\r\n  }\r\n\r\n  const funcionOnMouseDown = (nativeEvent) => {\r\n    startDrawing(nativeEvent)\r\n    startDrawRectangle(nativeEvent)\r\n    startDrawCircle(nativeEvent)\r\n    startDrawTriangle(nativeEvent)\r\n    startDrawingImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseMove = (nativeEvent) => {\r\n    draw(nativeEvent)\r\n    drawRectangle(nativeEvent)\r\n    drawCircle(nativeEvent)\r\n    drawTriangle(nativeEvent)\r\n    drawImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseUp = (nativeEvent) => {\r\n    stopDrawing(nativeEvent)\r\n    stopDrawRect(nativeEvent)\r\n    stopDrawCircle(nativeEvent)\r\n    stopDrawTriangle(nativeEvent)\r\n    stopDrawImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseOut = (nativeEvent) => {\r\n    stopDrawing(nativeEvent)\r\n    stopDrawRect(nativeEvent)\r\n    stopDrawCircle(nativeEvent)\r\n    stopDrawTriangle(nativeEvent)\r\n  }\r\n\r\n  return (\r\n    <canvas className=\"canvas-container\" id='pizarra'\r\n      ref={canvasRef}\r\n      onMouseDown={funcionOnMouseDown}\r\n      onMouseMove={functionOnMouseMove}\r\n      onMouseUp={functionOnMouseUp}\r\n      onMouseOut={functionOnMouseOut}\r\n    >\r\n    </canvas>\r\n  )\r\n}\r\n\r\nexport default DrawingCanvas"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,wCAAwC;AAC9D,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAO,cAAc;AACrB,OAAO,UAAU;AAAA;AACjB,IAAIC,MAAM;AAEV,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAA;EAC/B,IAAIC,KAAK,GAAGD,KAAK,CAACC,KAAK;EACvB,IAAIC,MAAM,GAAGF,KAAK,CAACE,MAAM;EACzB,IAAIC,MAAM,GAAGH,KAAK,CAACG,MAAM;EACzB,IAAIC,GAAG,GAAGJ,KAAK,CAACI,GAAG;EACnB,IAAIC,MAAM,GAAGL,KAAK,CAACK,MAAM;EACzB,IAAIC,MAAM,GAAGN,KAAK,CAACM,MAAM;EAEzB,IAAIC,QAAQ,GAAGP,KAAK,CAACO,QAAQ;EAC7B,IAAIC,SAAS,GAAGR,KAAK,CAACQ,SAAS;EAE/B,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMc,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMe,MAAM,GAAGf,MAAM,CAAC,CAAC,CAAC;EACxB,MAAMgB,MAAM,GAAGhB,MAAM,CAAC,CAAC,CAAC;EAExB,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACkB,aAAa,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACoB,eAAe,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACsB,iBAAiB,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACwB,YAAY,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACrDF,SAAS,CAAC,MAAM;IACd,MAAM4B,MAAM,GAAGd,SAAS,CAACe,OAAO;IAEhCD,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACG,WAAW;IACjCH,MAAM,CAACI,MAAM,GAAGJ,MAAM,CAACK,YAAY;IAEnC,MAAMC,OAAO,GAAGN,MAAM,CAACO,UAAU,CAAC,IAAI,EAAE;MAAEC,kBAAkB,EAAE;IAAK,CAAC,CAAC;IACrEF,OAAO,CAACG,OAAO,GAAG,OAAO;IACzBH,OAAO,CAACI,QAAQ,GAAG,OAAO;IAC1BvB,UAAU,CAACc,OAAO,GAAGK,OAAO;EAC9B,CAAC,EAAE,EAAE,CAAC;EAGNlC,SAAS,CAAC,MAAM;IACd,MAAM4B,MAAM,GAAGd,SAAS,CAACe,OAAO;IAChC,IAAIU,MAAM,GAAGxB,UAAU,CAACc,OAAO,CAACW,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEZ,MAAM,CAACE,KAAK,EAAEF,MAAM,CAACI,MAAM,CAAC;IAC/EJ,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACG,WAAW;IACjCH,MAAM,CAACI,MAAM,GAAGJ,MAAM,CAACK,YAAY;IACnClB,UAAU,CAACc,OAAO,CAACY,YAAY,CAACF,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/C,CAAC,EAAE,CAACG,MAAM,CAACC,WAAW,EAAED,MAAM,CAACE,UAAU,CAAC,CAAC;EAE3CjC,MAAM,CAACkC,EAAE,CAAC,SAAS,EAAEC,cAAc,CAAC;EACpCnC,MAAM,CAACkC,EAAE,CAAC,cAAc,EAAEE,YAAY,CAAC;EAEvC,SAASA,YAAY,CAACC,IAAI,EAAE;IAC1B,MAAMC,MAAM,GAAG,IAAIC,KAAK;IACxBD,MAAM,CAACE,MAAM,GAAG,MAAM;MACpBpC,UAAU,CAACc,OAAO,CAACuB,SAAS,CAACH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC;IACDA,MAAM,CAACI,GAAG,GAAGL,IAAI,CAACM,OAAO;EAC3B;EAEA,MAAMC,YAAY,GAAG,QAAqB;IAAA,IAApB;MAAEC;IAAY,CAAC;IACnC,IAAIhD,MAAM,KAAK,OAAO,EAAE;MACtB,MAAM;QAAEiD,OAAO;QAAEC;MAAQ,CAAC,GAAGF,WAAW;MACxCxC,MAAM,CAACa,OAAO,GAAG4B,OAAO;MACxBxC,MAAM,CAACY,OAAO,GAAG6B,OAAO;MACxBvC,YAAY,CAAC,IAAI,CAAC;MAClBqC,WAAW,CAACG,cAAc,EAAE;IAC9B;EACF,CAAC;EACD,MAAMC,IAAI,GAAG,SAAqB;IAAA,IAApB;MAAEJ;IAAY,CAAC;IAC3B,IAAI,CAACtC,SAAS,EAAE;MACd;IACF;IACA,MAAM;MAAEuC,OAAO;MAAEC;IAAQ,CAAC,GAAGF,WAAW;IACxCK,cAAc,CAAC7C,MAAM,CAACa,OAAO,EAAEZ,MAAM,CAACY,OAAO,EAAE4B,OAAO,EAAEC,OAAO,EAAEpD,KAAK,EAAEC,MAAM,EAAE,IAAI,CAAC;IACrFS,MAAM,CAACa,OAAO,GAAG4B,OAAO;IACxBxC,MAAM,CAACY,OAAO,GAAG6B,OAAO;IACxBF,WAAW,CAACG,cAAc,EAAE;EAC9B,CAAC;EAED,MAAME,cAAc,GAAG,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE3D,KAAK,EAAEC,MAAM,EAAE2D,IAAI,KAAK;IAC9DnD,UAAU,CAACc,OAAO,CAACsC,WAAW,GAAG7D,KAAK;IACtCS,UAAU,CAACc,OAAO,CAACuC,SAAS,GAAG7D,MAAM;IACrCQ,UAAU,CAACc,OAAO,CAACwC,SAAS,EAAE;IAC9BtD,UAAU,CAACc,OAAO,CAACyC,MAAM,CAACR,EAAE,EAAEC,EAAE,CAAC;IACjChD,UAAU,CAACc,OAAO,CAAC0C,MAAM,CAACP,EAAE,EAAEC,EAAE,CAAC;IACjClD,UAAU,CAACc,OAAO,CAAC2C,MAAM,EAAE;IAC3BzD,UAAU,CAACc,OAAO,CAAC4C,SAAS,EAAE;IAC9B,MAAMnB,OAAO,GAAGxC,SAAS,CAACe,OAAO,CAAC6C,SAAS,EAAE;IAC7C,IAAI,CAACR,IAAI,EAAE;MACT;IACF;IACAvD,MAAM,CAACuD,IAAI,CAAC,SAAS,EAAE;MACrBJ,EAAE;MACFC,EAAE;MACFC,EAAE;MACFC,EAAE;MACF3D,KAAK;MACLC,MAAM;MACN+C,OAAO;MACP9C;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMmE,WAAW,GAAG,SAAqB;IAAA,IAApB;MAAEnB;IAAY,CAAC;IAClC,IAAI,CAACtC,SAAS,EAAE;MACd;IACF;IACAH,UAAU,CAACc,OAAO,CAAC4C,SAAS,EAAE;IAC9BtD,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMyD,kBAAkB,GAAG,SAAqB;IAAA,IAApB;MAAEpB;IAAY,CAAC;IACzC,IAAIhD,MAAM,KAAK,UAAU,EAAE;MACzBQ,MAAM,CAACa,OAAO,GAAG2B,WAAW,CAACC,OAAO;MACpCxC,MAAM,CAACY,OAAO,GAAG2B,WAAW,CAACE,OAAO;MACpCvD,MAAM,GAAGW,SAAS,CAACe,OAAO,CAAC6C,SAAS,EAAE;MACtCrD,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,MAAMwD,aAAa,GAAG,SAAqB;IAAA,IAApB;MAAErB;IAAY,CAAC;IACpC,IAAI,CAACpC,aAAa,EAAE;MAClB;IACF;IACA,MAAM0D,OAAO,GAAGtB,WAAW,CAACC,OAAO;IACnC,MAAMsB,OAAO,GAAGvB,WAAW,CAACE,OAAO;IACnC,MAAMsB,SAAS,GAAGF,OAAO,GAAG9D,MAAM,CAACa,OAAO;IAC1C,MAAMoD,UAAU,GAAGF,OAAO,GAAG9D,MAAM,CAACY,OAAO;IAC3CqD,kBAAkB,CAAClE,MAAM,CAACa,OAAO,EAAEZ,MAAM,CAACY,OAAO,EAAEmD,SAAS,EAAEC,UAAU,EAAE3E,KAAK,EAAEC,MAAM,EAAEJ,MAAM,EAAE,IAAI,CAAC;EACxG,CAAC;EAED,MAAM+E,kBAAkB,GAAG,CAACpB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE3D,KAAK,EAAEC,MAAM,EAAE+C,OAAO,EAAEY,IAAI,KAAK;IAC3EnD,UAAU,CAACc,OAAO,CAACsC,WAAW,GAAG7D,KAAK;IACtCS,UAAU,CAACc,OAAO,CAACuC,SAAS,GAAG7D,MAAM;IACrC,MAAM0C,MAAM,GAAG,IAAIC,KAAK;IACxBD,MAAM,CAACE,MAAM,GAAG,MAAM;MACpBpC,UAAU,CAACc,OAAO,CAACsD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAErE,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;MACrFjB,UAAU,CAACc,OAAO,CAACuB,SAAS,CAACH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1ClC,UAAU,CAACc,OAAO,CAACuD,UAAU,CAACtB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IAC/C,CAAC;IACDhB,MAAM,CAACI,GAAG,GAAGC,OAAO;IACpB,IAAI,CAACY,IAAI,EAAE;MACT;IACF;IACAvD,MAAM,CAACuD,IAAI,CAAC,SAAS,EAAE;MACrBJ,EAAE;MACFC,EAAE;MACFC,EAAE;MACFC,EAAE;MACF3D,KAAK;MACLC,MAAM;MACN+C,OAAO;MACP9C;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAM6E,YAAY,GAAG,SAAqB;IAAA,IAApB;MAAE7B;IAAY,CAAC;IACnC,IAAI,CAACpC,aAAa,EAAE;MAClB;IACF;IACAC,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMiE,eAAe,GAAG,SAAqB;IAAA,IAApB;MAAE9B;IAAY,CAAC;IACtC,IAAIhD,MAAM,KAAK,SAAS,EAAE;MACxBQ,MAAM,CAACa,OAAO,GAAG2B,WAAW,CAACC,OAAO;MACpCxC,MAAM,CAACY,OAAO,GAAG2B,WAAW,CAACE,OAAO;MACpCvD,MAAM,GAAGW,SAAS,CAACe,OAAO,CAAC6C,SAAS,EAAE;MACtCnD,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC;EAED,MAAMgE,UAAU,GAAG,SAAqB;IAAA,IAApB;MAAE/B;IAAY,CAAC;IACjC,IAAI,CAAClC,eAAe,EAAE;MACpB;IACF;IACA,MAAMwD,OAAO,GAAGtB,WAAW,CAACC,OAAO;IACnC,MAAMsB,OAAO,GAAGvB,WAAW,CAACE,OAAO;IACnC,MAAM8B,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACZ,OAAO,GAAG9D,MAAM,CAACa,OAAO,CAAC;IACjD,MAAM8D,MAAM,GAAGF,IAAI,CAACC,GAAG,CAACX,OAAO,GAAG9D,MAAM,CAACY,OAAO,CAAC;IACjD,MAAM+D,QAAQ,GAAGH,IAAI,CAACI,GAAG,CAACL,MAAM,EAAEG,MAAM,CAAC;IACzCG,iBAAiB,CAAC9E,MAAM,CAACa,OAAO,EAAEZ,MAAM,CAACY,OAAO,EAAE+D,QAAQ,EAAEtF,KAAK,EAAEC,MAAM,EAAEJ,MAAM,EAAE,IAAI,CAAC;EAC1F,CAAC;EAED,MAAM2F,iBAAiB,GAAG,CAAChC,EAAE,EAAEC,EAAE,EAAEgC,KAAK,EAAEzF,KAAK,EAAEC,MAAM,EAAE+C,OAAO,EAAEY,IAAI,KAAK;IACzEnD,UAAU,CAACc,OAAO,CAACsC,WAAW,GAAG7D,KAAK;IACtCS,UAAU,CAACc,OAAO,CAACuC,SAAS,GAAG7D,MAAM;IACrC,MAAM0C,MAAM,GAAG,IAAIC,KAAK;IACxBD,MAAM,CAACE,MAAM,GAAG,MAAM;MACpBpC,UAAU,CAACc,OAAO,CAACsD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAErE,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;MACrFjB,UAAU,CAACc,OAAO,CAACuB,SAAS,CAACH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1ClC,UAAU,CAACc,OAAO,CAACwC,SAAS,EAAE;MAC9BtD,UAAU,CAACc,OAAO,CAACmE,GAAG,CAAClC,EAAE,EAAEC,EAAE,EAAEgC,KAAK,EAAE,CAAC,EAAE,CAAC,GAAGN,IAAI,CAACQ,EAAE,CAAC;MACrDlF,UAAU,CAACc,OAAO,CAAC2C,MAAM,EAAE;IAC7B,CAAC;IACDvB,MAAM,CAACI,GAAG,GAAGC,OAAO;IACpB,IAAI,CAACY,IAAI,EAAE;MACT;IACF;IACAvD,MAAM,CAACuD,IAAI,CAAC,SAAS,EAAE;MACrBJ,EAAE;MACFC,EAAE;MACFgC,KAAK;MACLzF,KAAK;MACLC,MAAM;MACN+C,OAAO;MACP9C;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAM0F,cAAc,GAAG,SAAqB;IAAA,IAApB;MAAE1C;IAAY,CAAC;IACrC,IAAI,CAAClC,eAAe,EAAE;MACpB;IACF;IACAC,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EAED,MAAM4E,iBAAiB,GAAG,UAAqB;IAAA,IAApB;MAAE3C;IAAY,CAAC;IACxC,IAAIhD,MAAM,KAAK,WAAW,EAAE;MAC1BQ,MAAM,CAACa,OAAO,GAAG2B,WAAW,CAACC,OAAO;MACpCxC,MAAM,CAACY,OAAO,GAAG2B,WAAW,CAACE,OAAO;MACpCvD,MAAM,GAAGW,SAAS,CAACe,OAAO,CAAC6C,SAAS,EAAE;MACtCjD,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC;EAED,MAAM2E,YAAY,GAAG,UAAqB;IAAA,IAApB;MAAE5C;IAAY,CAAC;IACnC,IAAI,CAAChC,iBAAiB,EAAE;MACtB;IACF;IACA,MAAM6E,OAAO,GAAGrF,MAAM,CAACa,OAAO,GAAG,CAAC,GAAG2B,WAAW,CAACC,OAAO;IACxD6C,mBAAmB,CAACtF,MAAM,CAACa,OAAO,EAAEZ,MAAM,CAACY,OAAO,EAAE2B,WAAW,CAACC,OAAO,EAAE4C,OAAO,EAAE7C,WAAW,CAACE,OAAO,EAAEpD,KAAK,EAAEC,MAAM,EAAEJ,MAAM,EAAE,IAAI,CAAC;EAErI,CAAC;EAED,MAAMmG,mBAAmB,GAAG,CAACxC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEuC,EAAE,EAAEC,MAAM,EAAElG,KAAK,EAAEC,MAAM,EAAE+C,OAAO,EAAEY,IAAI,KAAK;IACpFnD,UAAU,CAACc,OAAO,CAACsC,WAAW,GAAG7D,KAAK;IACtCS,UAAU,CAACc,OAAO,CAACuC,SAAS,GAAG7D,MAAM;IACrC,MAAM0C,MAAM,GAAG,IAAIC,KAAK;IACxBuD,OAAO,CAACC,GAAG,CAACpD,OAAO,CAAC;IACpBL,MAAM,CAACE,MAAM,GAAG,MAAM;MACpBpC,UAAU,CAACc,OAAO,CAACsD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAErE,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;MACrFjB,UAAU,CAACc,OAAO,CAACuB,SAAS,CAACH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1ClC,UAAU,CAACc,OAAO,CAACwC,SAAS,EAAE;MAC9BtD,UAAU,CAACc,OAAO,CAACyC,MAAM,CAACR,EAAE,EAAEC,EAAE,CAAC;MACjChD,UAAU,CAACc,OAAO,CAAC0C,MAAM,CAACP,EAAE,EAAEwC,MAAM,CAAC;MACrCzF,UAAU,CAACc,OAAO,CAAC0C,MAAM,CAACgC,EAAE,EAAEC,MAAM,CAAC;MACrCzF,UAAU,CAACc,OAAO,CAAC4C,SAAS,EAAE;MAC9B1D,UAAU,CAACc,OAAO,CAAC2C,MAAM,EAAE;IAC7B,CAAC;IACDvB,MAAM,CAACI,GAAG,GAAGC,OAAO;IACpB,IAAI,CAACY,IAAI,EAAE;MACT;IACF;IACAvD,MAAM,CAACuD,IAAI,CAAC,SAAS,EAAE;MACrBJ,EAAE;MACFC,EAAE;MACFC,EAAE;MACFuC,EAAE;MACFC,MAAM;MACNlG,KAAK;MACLC,MAAM;MACN+C,OAAO;MACP9C;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMmG,gBAAgB,GAAG,UAAqB;IAAA,IAApB;MAAEnD;IAAY,CAAC;IACvC,IAAI,CAAChC,iBAAiB,EAAE;MACtB;IACF;IACAC,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMmF,OAAO,GAAG,UAAqB;IAAA,IAApB;MAAEpD;IAAY,CAAC;IAC9B,IAAI,CAAC9B,YAAY,EAAE;MACjB;IACF;IACA,MAAM+B,OAAO,GAAGD,WAAW,CAACC,OAAO;IACnC,MAAMC,OAAO,GAAGF,WAAW,CAACE,OAAO;IACnC,MAAMI,EAAE,GAAGL,OAAO,GAAGzC,MAAM,CAACa,OAAO;IACnC,MAAMkC,EAAE,GAAGL,OAAO,GAAGzC,MAAM,CAACY,OAAO;IACnCgF,eAAe,CAACpG,GAAG,EAAEqD,EAAE,EAAEC,EAAE,EAAEnD,QAAQ,EAAEC,SAAS,EAAEH,MAAM,EAAE,IAAI,CAAC;IAC/D8C,WAAW,CAACG,cAAc,EAAE;EAC9B,CAAC;EAED,MAAMkD,eAAe,GAAG,CAACpG,GAAG,EAAEqD,EAAE,EAAEC,EAAE,EAAEnD,QAAQ,EAAEC,SAAS,EAAEiG,SAAS,EAAE5C,IAAI,KAAK;IAC7E,MAAM6C,OAAO,GAAG,IAAI7D,KAAK;IACzB,MAAM8D,KAAK,GAAG,IAAI9D,KAAK;IACvB6D,OAAO,CAAC1D,GAAG,GAAGyD,SAAS;IACvBC,OAAO,CAAC5D,MAAM,GAAG,MAAM;MACrBpC,UAAU,CAACc,OAAO,CAACsD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAErE,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;MACrFjB,UAAU,CAACc,OAAO,CAACuB,SAAS,CAAC2D,OAAO,EAAE,CAAC,EAAE,CAAC,EAAEjG,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;IAChG,CAAC;IACDgF,KAAK,CAAC3D,GAAG,GAAG5C,GAAG;IACfuG,KAAK,CAAC7D,MAAM,GAAG,MAAM;MACnBpC,UAAU,CAACc,OAAO,CAACuB,SAAS,CAAC4D,KAAK,EAAElD,EAAE,EAAEC,EAAE,EAAEnD,QAAQ,EAAEC,SAAS,CAAC;IAClE,CAAC;IAED,IAAI,CAACqD,IAAI,EAAE;MACT;IACF;IACAvD,MAAM,CAACuD,IAAI,CAAC,SAAS,EAAE;MACrBzD,GAAG;MACHqD,EAAE;MACFC,EAAE;MACFnD,QAAQ;MACRC,SAAS;MACTiG,SAAS;MACTtG;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMyG,eAAe,GAAG,UAAqB;IAAA,IAApB;MAAEzD;IAAY,CAAC;IAEtC,IAAIhD,MAAM,KAAK,KAAK,EAAE;MACpBQ,MAAM,CAACa,OAAO,IAAI2B,WAAW,CAACC,OAAO;MACrCxC,MAAM,CAACY,OAAO,IAAI2B,WAAW,CAACE,OAAO;MACrC/B,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;EACD,MAAMuF,WAAW,GAAG,UAAqB;IAAA,IAApB;MAAE1D;IAAY,CAAC;IAClC,IAAI,CAAC9B,YAAY,EAAE;MACjB;IACF;IACAV,MAAM,CAACa,OAAO,IAAI2B,WAAW,CAACC,OAAO;IACrCxC,MAAM,CAACY,OAAO,IAAI2B,WAAW,CAACE,OAAO;IACrC/B,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,SAASmB,cAAc,CAACE,IAAI,EAAE;IAC5B,QAAQA,IAAI,CAACxC,MAAM;MACjB,KAAK,OAAO;QACVqD,cAAc,CAACb,IAAI,CAACc,EAAE,EAAEd,IAAI,CAACe,EAAE,EAAEf,IAAI,CAACgB,EAAE,EAAEhB,IAAI,CAACiB,EAAE,EAAEjB,IAAI,CAAC1C,KAAK,EAAE0C,IAAI,CAACzC,MAAM,CAAC;QAC3E;MACF,KAAK,UAAU;QACb2E,kBAAkB,CAAClC,IAAI,CAACc,EAAE,EAAEd,IAAI,CAACe,EAAE,EAAEf,IAAI,CAACgB,EAAE,EAAEhB,IAAI,CAACiB,EAAE,EAAEjB,IAAI,CAAC1C,KAAK,EAAE0C,IAAI,CAACzC,MAAM,EAAEyC,IAAI,CAACM,OAAO,CAAC;QAC7F;MACF,KAAK,SAAS;QACZwC,iBAAiB,CAAC9C,IAAI,CAACc,EAAE,EAAEd,IAAI,CAACe,EAAE,EAAEf,IAAI,CAAC+C,KAAK,EAAE/C,IAAI,CAAC1C,KAAK,EAAE0C,IAAI,CAACzC,MAAM,EAAEyC,IAAI,CAACM,OAAO,CAAC;QACtF;MACF,KAAK,WAAW;QACdgD,mBAAmB,CAACtD,IAAI,CAACc,EAAE,EAAEd,IAAI,CAACe,EAAE,EAAEf,IAAI,CAACgB,EAAE,EAAEhB,IAAI,CAACuD,EAAE,EAAEvD,IAAI,CAACwD,MAAM,EAAExD,IAAI,CAAC1C,KAAK,EAAE0C,IAAI,CAACzC,MAAM,EAAEyC,IAAI,CAACM,OAAO,CAAC;QAC3G;MACF,KAAK,KAAK;QACRuD,eAAe,CAAC7D,IAAI,CAACvC,GAAG,EAAEuC,IAAI,CAACc,EAAE,EAAEd,IAAI,CAACe,EAAE,EAAEf,IAAI,CAACpC,QAAQ,EAAEoC,IAAI,CAACnC,SAAS,EAAEmC,IAAI,CAAC8D,SAAS,CAAC;IAAA;EAEhG;EAEA,MAAMK,kBAAkB,GAAI3D,WAAW,IAAK;IAC1CD,YAAY,CAACC,WAAW,CAAC;IACzBoB,kBAAkB,CAACpB,WAAW,CAAC;IAC/B8B,eAAe,CAAC9B,WAAW,CAAC;IAC5B2C,iBAAiB,CAAC3C,WAAW,CAAC;IAC9ByD,eAAe,CAACzD,WAAW,CAAC;EAC9B,CAAC;EAED,MAAM4D,mBAAmB,GAAI5D,WAAW,IAAK;IAC3CI,IAAI,CAACJ,WAAW,CAAC;IACjBqB,aAAa,CAACrB,WAAW,CAAC;IAC1B+B,UAAU,CAAC/B,WAAW,CAAC;IACvB4C,YAAY,CAAC5C,WAAW,CAAC;IACzBoD,OAAO,CAACpD,WAAW,CAAC;EACtB,CAAC;EAED,MAAM6D,iBAAiB,GAAI7D,WAAW,IAAK;IACzCmB,WAAW,CAACnB,WAAW,CAAC;IACxB6B,YAAY,CAAC7B,WAAW,CAAC;IACzB0C,cAAc,CAAC1C,WAAW,CAAC;IAC3BmD,gBAAgB,CAACnD,WAAW,CAAC;IAC7B0D,WAAW,CAAC1D,WAAW,CAAC;EAC1B,CAAC;EAED,MAAM8D,kBAAkB,GAAI9D,WAAW,IAAK;IAC1CmB,WAAW,CAACnB,WAAW,CAAC;IACxB6B,YAAY,CAAC7B,WAAW,CAAC;IACzB0C,cAAc,CAAC1C,WAAW,CAAC;IAC3BmD,gBAAgB,CAACnD,WAAW,CAAC;EAC/B,CAAC;EAED,oBACE;IAAQ,SAAS,EAAC,kBAAkB;IAAC,EAAE,EAAC,SAAS;IAC/C,GAAG,EAAE1C,SAAU;IACf,WAAW,EAAEqG,kBAAmB;IAChC,WAAW,EAAEC,mBAAoB;IACjC,SAAS,EAAEC,iBAAkB;IAC7B,UAAU,EAAEC;EAAmB;IAAA;IAAA;IAAA;EAAA,QAExB;AAEb,CAAC;AAAA,GAhYKlH,aAAa;AAAA,KAAbA,aAAa;AAkYnB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}