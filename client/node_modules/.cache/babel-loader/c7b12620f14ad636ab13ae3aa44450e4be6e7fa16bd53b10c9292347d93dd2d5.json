{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\pizarrareact2.0\\\\client\\\\src\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport { click } from '@testing-library/user-event/dist/click';\nimport { useEffect, useRef, useState } from 'react';\nimport './styles.css';\nimport './w3.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar imdata;\nconst DrawingCanvas = props => {\n  _s();\n  let color = props.color;\n  let grosor = props.grosor;\n  let figura = props.figura;\n  let img = props.img;\n  let newImg = props.newImg;\n  let socket = props.socket;\n  let newWidth = props.newWidth;\n  let newHeight = props.newHeight;\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const startX = useRef(0);\n  const startY = useRef(0);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDrawingRect, setDrawingRect] = useState(false);\n  const [isDrawingCircle, setDrawingCircle] = useState(false);\n  const [isDrawingTriangle, setDrawingTriangle] = useState(false);\n  const [isDrawingImg, setDrawingImg] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const context = canvas.getContext(\"2d\");\n    context.lineCap = \"round\";\n    context.lineJoin = \"round\";\n    contextRef.current = context;\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    let imInit = contextRef.current.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    contextRef.current.putImageData(imInit, 0, 0);\n  }, [window.innerHeight, window.innerWidth]);\n  socket.on('drawing', onDrawingEvent);\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    if (figura === \"linea\") {\n      const {\n        offsetX,\n        offsetY\n      } = nativeEvent;\n      startX.current = offsetX;\n      startY.current = offsetY;\n      setIsDrawing(true);\n      nativeEvent.preventDefault();\n    }\n  };\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    if (!isDrawing) {\n      return;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    socketDrawLine(startX.current, startY.current, offsetX, offsetY, color, grosor, true);\n    startX.current = offsetX;\n    startY.current = offsetY;\n    nativeEvent.preventDefault();\n  };\n  const socketDrawLine = (x0, y0, x1, y1, color, grosor, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(x0, y0);\n    contextRef.current.lineTo(x1, y1);\n    contextRef.current.stroke();\n    contextRef.current.closePath();\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      x1,\n      y1,\n      color,\n      grosor,\n      figura\n    });\n  };\n  const stopDrawing = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n    if (!isDrawing) {\n      return;\n    }\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n  const startDrawRectangle = _ref4 => {\n    let {\n      nativeEvent\n    } = _ref4;\n    if (figura === \"cuadrado\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      // imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\n      setDrawingRect(true);\n    }\n  };\n  const drawRectangle = _ref5 => {\n    let {\n      nativeEvent\n    } = _ref5;\n    if (!isDrawingRect) {\n      return;\n    }\n    const newPosX = nativeEvent.offsetX;\n    const newPosY = nativeEvent.offsetY;\n    const rectWidth = newPosX - startX.current;\n    const rectHeight = newPosY - startY.current;\n    socketDrawCuadrado(startX.current, startY.current, rectWidth, rectHeight, color, grosor, imdata, true);\n  };\n  const socketDrawCuadrado = (x0, y0, x1, y1, color, grosor, imgData, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    //contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\n    //contextRef.current.putImageData(imgData, 0, 0)\n    contextRef.current.strokeRect(x0, y0, x1, y1);\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      x1,\n      y1,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawRect = _ref6 => {\n    let {\n      nativeEvent\n    } = _ref6;\n    if (!isDrawingRect) {\n      return;\n    }\n    setDrawingRect(false);\n  };\n  const startDrawCircle = _ref7 => {\n    let {\n      nativeEvent\n    } = _ref7;\n    if (figura === \"circulo\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);\n      setDrawingCircle(true);\n    }\n  };\n  const drawCircle = _ref8 => {\n    let {\n      nativeEvent\n    } = _ref8;\n    if (!isDrawingCircle) {\n      return;\n    }\n    const newPosX = nativeEvent.offsetX;\n    const newPosY = nativeEvent.offsetY;\n    const radioX = Math.abs(newPosX - startX.current);\n    const radioY = Math.abs(newPosY - startY.current);\n    const radioMax = Math.max(radioX, radioY);\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    contextRef.current.putImageData(imdata, 0, 0);\n    contextRef.current.beginPath();\n    contextRef.current.arc(startX.current, startY.current, radioMax, 0, 2 * Math.PI);\n    contextRef.current.stroke();\n  };\n  const stopDrawCircle = _ref9 => {\n    let {\n      nativeEvent\n    } = _ref9;\n    if (!isDrawingCircle) {\n      return;\n    }\n    setDrawingCircle(false);\n  };\n  const startDrawTriangle = _ref10 => {\n    let {\n      nativeEvent\n    } = _ref10;\n    if (figura === \"triangulo\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);\n      setDrawingTriangle(true);\n    }\n  };\n  const drawTriangle = _ref11 => {\n    let {\n      nativeEvent\n    } = _ref11;\n    if (!isDrawingTriangle) {\n      return;\n    }\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    contextRef.current.putImageData(imdata, 0, 0);\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(startX.current, startY.current);\n    contextRef.current.lineTo(nativeEvent.offsetX, nativeEvent.offsetY);\n    contextRef.current.lineTo(startX.current * 2 - nativeEvent.offsetX, nativeEvent.offsetY);\n    contextRef.current.closePath();\n    contextRef.current.stroke();\n  };\n  const stopDrawTriangle = _ref12 => {\n    let {\n      nativeEvent\n    } = _ref12;\n    if (!isDrawingTriangle) {\n      return;\n    }\n    setDrawingTriangle(false);\n  };\n  const drawImg = _ref13 => {\n    let {\n      nativeEvent\n    } = _ref13;\n    if (!isDrawingImg) {\n      return;\n    }\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    contextRef.current.putImageData(newImg, 0, 0);\n    const offsetX = nativeEvent.offsetX;\n    const offsetY = nativeEvent.offsetY;\n    contextRef.current.drawImage(img, offsetX + startX.current, offsetY + startY.current, newWidth, newHeight);\n    nativeEvent.preventDefault();\n  };\n  const startDrawingImg = _ref14 => {\n    let {\n      nativeEvent\n    } = _ref14;\n    if (figura === \"img\") {\n      startX.current -= nativeEvent.offsetX;\n      startY.current -= nativeEvent.offsetY;\n      setDrawingImg(true);\n    }\n  };\n  const stopDrawImg = _ref15 => {\n    let {\n      nativeEvent\n    } = _ref15;\n    if (!isDrawingImg) {\n      return;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    startX.current += offsetX;\n    startY.current += offsetY;\n    setDrawingImg(false);\n  };\n  function onDrawingEvent(data) {\n    console.log('aqui');\n    switch (data.figura) {\n      case 'linea':\n        socketDrawLine(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor);\n        break;\n      case 'cuadrado':\n        socketDrawCuadrado(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor, data.imgData);\n        break;\n    }\n  }\n  const funcionOnMouseDown = nativeEvent => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    startDrawing(nativeEvent);\n    startDrawRectangle(nativeEvent);\n    startDrawCircle(nativeEvent);\n    startDrawTriangle(nativeEvent);\n    startDrawingImg(nativeEvent);\n  };\n  const functionOnMouseMove = nativeEvent => {\n    draw(nativeEvent);\n    drawRectangle(nativeEvent);\n    drawCircle(nativeEvent);\n    drawTriangle(nativeEvent);\n    drawImg(nativeEvent);\n  };\n  const functionOnMouseUp = nativeEvent => {\n    stopDrawing(nativeEvent);\n    stopDrawRect(nativeEvent);\n    stopDrawCircle(nativeEvent);\n    stopDrawTriangle(nativeEvent);\n    stopDrawImg(nativeEvent);\n  };\n  const functionOnMouseOut = nativeEvent => {\n    stopDrawing(nativeEvent);\n    stopDrawRect(nativeEvent);\n    stopDrawCircle(nativeEvent);\n    stopDrawTriangle(nativeEvent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas-container\",\n    id: \"pizarra\",\n    ref: canvasRef,\n    onMouseDown: funcionOnMouseDown,\n    onMouseMove: functionOnMouseMove,\n    onMouseUp: functionOnMouseUp,\n    onMouseOut: functionOnMouseOut\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"6fA9rfAmPCvl291/MYBSMUFxDrc=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["click","useEffect","useRef","useState","imdata","DrawingCanvas","props","color","grosor","figura","img","newImg","socket","newWidth","newHeight","canvasRef","contextRef","startX","startY","isDrawing","setIsDrawing","isDrawingRect","setDrawingRect","isDrawingCircle","setDrawingCircle","isDrawingTriangle","setDrawingTriangle","isDrawingImg","setDrawingImg","canvas","current","width","clientWidth","height","clientHeight","context","getContext","lineCap","lineJoin","imInit","getImageData","putImageData","window","innerHeight","innerWidth","on","onDrawingEvent","startDrawing","nativeEvent","offsetX","offsetY","preventDefault","draw","socketDrawLine","x0","y0","x1","y1","emit","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","stopDrawing","startDrawRectangle","drawRectangle","newPosX","newPosY","rectWidth","rectHeight","socketDrawCuadrado","imgData","strokeRect","stopDrawRect","startDrawCircle","drawCircle","radioX","Math","abs","radioY","radioMax","max","clearRect","arc","PI","stopDrawCircle","startDrawTriangle","drawTriangle","stopDrawTriangle","drawImg","drawImage","startDrawingImg","stopDrawImg","data","console","log","funcionOnMouseDown","functionOnMouseMove","functionOnMouseUp","functionOnMouseOut"],"sources":["D:/Web/pizarrareact2.0/client/src/DrawingCanvas.js"],"sourcesContent":["import { click } from '@testing-library/user-event/dist/click'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport './styles.css'\r\nimport './w3.css'\r\nvar imdata\r\n\r\nconst DrawingCanvas = (props) => {\r\n  let color = props.color\r\n  let grosor = props.grosor\r\n  let figura = props.figura\r\n  let img = props.img\r\n  let newImg = props.newImg\r\n  let socket = props.socket\r\n\r\n  let newWidth = props.newWidth\r\n  let newHeight = props.newHeight\r\n\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  const startX = useRef(0)\r\n  const startY = useRef(0)\r\n\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [isDrawingRect, setDrawingRect] = useState(false);\r\n  const [isDrawingCircle, setDrawingCircle] = useState(false);\r\n  const [isDrawingTriangle, setDrawingTriangle] = useState(false);\r\n  const [isDrawingImg, setDrawingImg] = useState(false);\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    context.lineCap = \"round\";\r\n    context.lineJoin = \"round\";\r\n    contextRef.current = context;\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    let imInit = contextRef.current.getImageData(0, 0, canvas.width, canvas.height)\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n    contextRef.current.putImageData(imInit, 0, 0)\r\n  }, [window.innerHeight, window.innerWidth])\r\n\r\n  socket.on('drawing', onDrawingEvent)\r\n\r\n  const startDrawing = ({ nativeEvent }) => {\r\n    if (figura === \"linea\") {\r\n      const { offsetX, offsetY } = nativeEvent;\r\n      startX.current = offsetX;\r\n      startY.current = offsetY\r\n      setIsDrawing(true);\r\n      nativeEvent.preventDefault();\r\n    }\r\n  };\r\n  const draw = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    socketDrawLine(startX.current, startY.current, offsetX, offsetY, color, grosor, true)\r\n    startX.current = offsetX\r\n    startY.current = offsetY\r\n    nativeEvent.preventDefault();\r\n  };\r\n\r\n  const socketDrawLine = (x0, y0, x1, y1, color, grosor, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(x0, y0)\r\n    contextRef.current.lineTo(x1, y1)\r\n    contextRef.current.stroke()\r\n    contextRef.current.closePath()\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      x1,\r\n      y1,\r\n      color,\r\n      grosor,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawing = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    contextRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  const startDrawRectangle = ({ nativeEvent }) => {\r\n    if (figura === \"cuadrado\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n     // imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      setDrawingRect(true)\r\n    }\r\n  }\r\n\r\n  const drawRectangle = ({ nativeEvent }) => {\r\n    if (!isDrawingRect) {\r\n      return\r\n    }\r\n    const newPosX = nativeEvent.offsetX\r\n    const newPosY = nativeEvent.offsetY\r\n    const rectWidth = newPosX - startX.current\r\n    const rectHeight = newPosY - startY.current\r\n    socketDrawCuadrado(startX.current,startY.current,rectWidth,rectHeight,color,grosor,imdata,true)\r\n  }\r\n\r\n  const socketDrawCuadrado = (x0, y0, x1, y1, color, grosor, imgData, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    //contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n    //contextRef.current.putImageData(imgData, 0, 0)\r\n    contextRef.current.strokeRect(x0, y0, x1, y1)\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      x1,\r\n      y1,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawRect = ({ nativeEvent }) => {\r\n    if (!isDrawingRect) {\r\n      return\r\n    }\r\n    setDrawingRect(false)\r\n  }\r\n\r\n  const startDrawCircle = ({ nativeEvent }) => {\r\n    if (figura === \"circulo\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n\r\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      setDrawingCircle(true)\r\n    }\r\n  }\r\n\r\n  const drawCircle = ({ nativeEvent }) => {\r\n    if (!isDrawingCircle) {\r\n      return\r\n    }\r\n    const newPosX = nativeEvent.offsetX\r\n    const newPosY = nativeEvent.offsetY\r\n    const radioX = Math.abs(newPosX - startX.current)\r\n    const radioY = Math.abs(newPosY - startY.current)\r\n    const radioMax = Math.max(radioX, radioY)\r\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n    contextRef.current.putImageData(imdata, 0, 0)\r\n\r\n    contextRef.current.beginPath()\r\n    contextRef.current.arc(startX.current, startY.current, radioMax, 0, 2 * Math.PI)\r\n    contextRef.current.stroke()\r\n\r\n  }\r\n\r\n  const stopDrawCircle = ({ nativeEvent }) => {\r\n    if (!isDrawingCircle) {\r\n      return\r\n    }\r\n    setDrawingCircle(false)\r\n  }\r\n\r\n  const startDrawTriangle = ({ nativeEvent }) => {\r\n    if (figura === \"triangulo\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      setDrawingTriangle(true)\r\n    }\r\n  }\r\n\r\n  const drawTriangle = ({ nativeEvent }) => {\r\n    if (!isDrawingTriangle) {\r\n      return\r\n    }\r\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n    contextRef.current.putImageData(imdata, 0, 0)\r\n\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(startX.current, startY.current);\r\n    contextRef.current.lineTo(nativeEvent.offsetX, nativeEvent.offsetY);\r\n    contextRef.current.lineTo(startX.current * 2 - nativeEvent.offsetX, nativeEvent.offsetY);\r\n    contextRef.current.closePath();\r\n    contextRef.current.stroke();\r\n  }\r\n\r\n  const stopDrawTriangle = ({ nativeEvent }) => {\r\n    if (!isDrawingTriangle) {\r\n      return\r\n    }\r\n    setDrawingTriangle(false)\r\n  }\r\n  const drawImg = ({ nativeEvent }) => {\r\n    if (!isDrawingImg) {\r\n      return\r\n    }\r\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n    contextRef.current.putImageData(newImg, 0, 0)\r\n    const offsetX = nativeEvent.offsetX\r\n    const offsetY = nativeEvent.offsetY\r\n    contextRef.current.drawImage(img, offsetX + startX.current, offsetY + startY.current, newWidth, newHeight)\r\n\r\n    nativeEvent.preventDefault();\r\n\r\n  }\r\n  const startDrawingImg = ({ nativeEvent }) => {\r\n\r\n    if (figura === \"img\") {\r\n      startX.current -= nativeEvent.offsetX\r\n      startY.current -= nativeEvent.offsetY\r\n      setDrawingImg(true)\r\n    }\r\n  }\r\n  const stopDrawImg = ({ nativeEvent }) => {\r\n    if (!isDrawingImg) {\r\n      return\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    startX.current += offsetX\r\n    startY.current += offsetY\r\n    setDrawingImg(false)\r\n  }\r\n\r\n  function onDrawingEvent(data) {\r\n    console.log('aqui')\r\n    switch (data.figura) {\r\n      case 'linea':\r\n        socketDrawLine(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor);\r\n        break;\r\n      case 'cuadrado':\r\n        socketDrawCuadrado(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor,data.imgData)\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const funcionOnMouseDown = (nativeEvent) => {\r\n    contextRef.current.strokeStyle = color\r\n    contextRef.current.lineWidth = grosor\r\n    startDrawing(nativeEvent)\r\n    startDrawRectangle(nativeEvent)\r\n    startDrawCircle(nativeEvent)\r\n    startDrawTriangle(nativeEvent)\r\n    startDrawingImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseMove = (nativeEvent) => {\r\n    draw(nativeEvent)\r\n    drawRectangle(nativeEvent)\r\n    drawCircle(nativeEvent)\r\n    drawTriangle(nativeEvent)\r\n    drawImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseUp = (nativeEvent) => {\r\n    stopDrawing(nativeEvent)\r\n    stopDrawRect(nativeEvent)\r\n    stopDrawCircle(nativeEvent)\r\n    stopDrawTriangle(nativeEvent)\r\n    stopDrawImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseOut = (nativeEvent) => {\r\n    stopDrawing(nativeEvent)\r\n    stopDrawRect(nativeEvent)\r\n    stopDrawCircle(nativeEvent)\r\n    stopDrawTriangle(nativeEvent)\r\n  }\r\n\r\n  return (\r\n    <canvas className=\"canvas-container\" id='pizarra'\r\n      ref={canvasRef}\r\n      onMouseDown={funcionOnMouseDown}\r\n      onMouseMove={functionOnMouseMove}\r\n      onMouseUp={functionOnMouseUp}\r\n      onMouseOut={functionOnMouseOut}\r\n    >\r\n\r\n    </canvas>\r\n  )\r\n}\r\n\r\nexport default DrawingCanvas"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,wCAAwC;AAC9D,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAO,cAAc;AACrB,OAAO,UAAU;AAAA;AACjB,IAAIC,MAAM;AAEV,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAA;EAC/B,IAAIC,KAAK,GAAGD,KAAK,CAACC,KAAK;EACvB,IAAIC,MAAM,GAAGF,KAAK,CAACE,MAAM;EACzB,IAAIC,MAAM,GAAGH,KAAK,CAACG,MAAM;EACzB,IAAIC,GAAG,GAAGJ,KAAK,CAACI,GAAG;EACnB,IAAIC,MAAM,GAAGL,KAAK,CAACK,MAAM;EACzB,IAAIC,MAAM,GAAGN,KAAK,CAACM,MAAM;EAEzB,IAAIC,QAAQ,GAAGP,KAAK,CAACO,QAAQ;EAC7B,IAAIC,SAAS,GAAGR,KAAK,CAACQ,SAAS;EAE/B,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMc,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMe,MAAM,GAAGf,MAAM,CAAC,CAAC,CAAC;EACxB,MAAMgB,MAAM,GAAGhB,MAAM,CAAC,CAAC,CAAC;EAExB,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACkB,aAAa,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACoB,eAAe,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACsB,iBAAiB,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACwB,YAAY,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACrDF,SAAS,CAAC,MAAM;IACd,MAAM4B,MAAM,GAAGd,SAAS,CAACe,OAAO;IAEhCD,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACG,WAAW;IACjCH,MAAM,CAACI,MAAM,GAAGJ,MAAM,CAACK,YAAY;IAEnC,MAAMC,OAAO,GAAGN,MAAM,CAACO,UAAU,CAAC,IAAI,CAAC;IACvCD,OAAO,CAACE,OAAO,GAAG,OAAO;IACzBF,OAAO,CAACG,QAAQ,GAAG,OAAO;IAC1BtB,UAAU,CAACc,OAAO,GAAGK,OAAO;EAC9B,CAAC,EAAE,EAAE,CAAC;EAGNlC,SAAS,CAAC,MAAM;IACd,MAAM4B,MAAM,GAAGd,SAAS,CAACe,OAAO;IAChC,IAAIS,MAAM,GAAGvB,UAAU,CAACc,OAAO,CAACU,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEX,MAAM,CAACE,KAAK,EAAEF,MAAM,CAACI,MAAM,CAAC;IAC/EJ,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACG,WAAW;IACjCH,MAAM,CAACI,MAAM,GAAGJ,MAAM,CAACK,YAAY;IACnClB,UAAU,CAACc,OAAO,CAACW,YAAY,CAACF,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/C,CAAC,EAAE,CAACG,MAAM,CAACC,WAAW,EAAED,MAAM,CAACE,UAAU,CAAC,CAAC;EAE3ChC,MAAM,CAACiC,EAAE,CAAC,SAAS,EAAEC,cAAc,CAAC;EAEpC,MAAMC,YAAY,GAAG,QAAqB;IAAA,IAApB;MAAEC;IAAY,CAAC;IACnC,IAAIvC,MAAM,KAAK,OAAO,EAAE;MACtB,MAAM;QAAEwC,OAAO;QAAEC;MAAQ,CAAC,GAAGF,WAAW;MACxC/B,MAAM,CAACa,OAAO,GAAGmB,OAAO;MACxB/B,MAAM,CAACY,OAAO,GAAGoB,OAAO;MACxB9B,YAAY,CAAC,IAAI,CAAC;MAClB4B,WAAW,CAACG,cAAc,EAAE;IAC9B;EACF,CAAC;EACD,MAAMC,IAAI,GAAG,SAAqB;IAAA,IAApB;MAAEJ;IAAY,CAAC;IAC3B,IAAI,CAAC7B,SAAS,EAAE;MACd;IACF;IACA,MAAM;MAAE8B,OAAO;MAAEC;IAAQ,CAAC,GAAGF,WAAW;IACxCK,cAAc,CAACpC,MAAM,CAACa,OAAO,EAAEZ,MAAM,CAACY,OAAO,EAAEmB,OAAO,EAAEC,OAAO,EAAE3C,KAAK,EAAEC,MAAM,EAAE,IAAI,CAAC;IACrFS,MAAM,CAACa,OAAO,GAAGmB,OAAO;IACxB/B,MAAM,CAACY,OAAO,GAAGoB,OAAO;IACxBF,WAAW,CAACG,cAAc,EAAE;EAC9B,CAAC;EAED,MAAME,cAAc,GAAG,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAElD,KAAK,EAAEC,MAAM,EAAEkD,IAAI,KAAK;IAC9D1C,UAAU,CAACc,OAAO,CAAC6B,WAAW,GAAGpD,KAAK;IACtCS,UAAU,CAACc,OAAO,CAAC8B,SAAS,GAAGpD,MAAM;IACrCQ,UAAU,CAACc,OAAO,CAAC+B,SAAS,EAAE;IAC9B7C,UAAU,CAACc,OAAO,CAACgC,MAAM,CAACR,EAAE,EAAEC,EAAE,CAAC;IACjCvC,UAAU,CAACc,OAAO,CAACiC,MAAM,CAACP,EAAE,EAAEC,EAAE,CAAC;IACjCzC,UAAU,CAACc,OAAO,CAACkC,MAAM,EAAE;IAC3BhD,UAAU,CAACc,OAAO,CAACmC,SAAS,EAAE;IAC9B,IAAI,CAACP,IAAI,EAAE;MACT;IACF;IACA9C,MAAM,CAAC8C,IAAI,CAAC,SAAS,EAAE;MACrBJ,EAAE;MACFC,EAAE;MACFC,EAAE;MACFC,EAAE;MACFlD,KAAK;MACLC,MAAM;MACNC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMyD,WAAW,GAAG,SAAqB;IAAA,IAApB;MAAElB;IAAY,CAAC;IAClC,IAAI,CAAC7B,SAAS,EAAE;MACd;IACF;IACAH,UAAU,CAACc,OAAO,CAACmC,SAAS,EAAE;IAC9B7C,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAM+C,kBAAkB,GAAG,SAAqB;IAAA,IAApB;MAAEnB;IAAY,CAAC;IACzC,IAAIvC,MAAM,KAAK,UAAU,EAAE;MACzBQ,MAAM,CAACa,OAAO,GAAGkB,WAAW,CAACC,OAAO;MACpC/B,MAAM,CAACY,OAAO,GAAGkB,WAAW,CAACE,OAAO;MACrC;MACC5B,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,MAAM8C,aAAa,GAAG,SAAqB;IAAA,IAApB;MAAEpB;IAAY,CAAC;IACpC,IAAI,CAAC3B,aAAa,EAAE;MAClB;IACF;IACA,MAAMgD,OAAO,GAAGrB,WAAW,CAACC,OAAO;IACnC,MAAMqB,OAAO,GAAGtB,WAAW,CAACE,OAAO;IACnC,MAAMqB,SAAS,GAAGF,OAAO,GAAGpD,MAAM,CAACa,OAAO;IAC1C,MAAM0C,UAAU,GAAGF,OAAO,GAAGpD,MAAM,CAACY,OAAO;IAC3C2C,kBAAkB,CAACxD,MAAM,CAACa,OAAO,EAACZ,MAAM,CAACY,OAAO,EAACyC,SAAS,EAACC,UAAU,EAACjE,KAAK,EAACC,MAAM,EAACJ,MAAM,EAAC,IAAI,CAAC;EACjG,CAAC;EAED,MAAMqE,kBAAkB,GAAG,CAACnB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAElD,KAAK,EAAEC,MAAM,EAAEkE,OAAO,EAAEhB,IAAI,KAAK;IAC3E1C,UAAU,CAACc,OAAO,CAAC6B,WAAW,GAAGpD,KAAK;IACtCS,UAAU,CAACc,OAAO,CAAC8B,SAAS,GAAGpD,MAAM;IACrC;IACA;IACAQ,UAAU,CAACc,OAAO,CAAC6C,UAAU,CAACrB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IAC7C,IAAI,CAACC,IAAI,EAAE;MACT;IACF;IACA9C,MAAM,CAAC8C,IAAI,CAAC,SAAS,EAAE;MACrBJ,EAAE;MACFC,EAAE;MACFC,EAAE;MACFC,EAAE;MACFlD,KAAK;MACLC,MAAM;MACNkE,OAAO;MACPjE;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMmE,YAAY,GAAG,SAAqB;IAAA,IAApB;MAAE5B;IAAY,CAAC;IACnC,IAAI,CAAC3B,aAAa,EAAE;MAClB;IACF;IACAC,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMuD,eAAe,GAAG,SAAqB;IAAA,IAApB;MAAE7B;IAAY,CAAC;IACtC,IAAIvC,MAAM,KAAK,SAAS,EAAE;MACxBQ,MAAM,CAACa,OAAO,GAAGkB,WAAW,CAACC,OAAO;MACpC/B,MAAM,CAACY,OAAO,GAAGkB,WAAW,CAACE,OAAO;MAEpC9C,MAAM,GAAGY,UAAU,CAACc,OAAO,CAACU,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEzB,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;MACjGT,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC;EAED,MAAMsD,UAAU,GAAG,SAAqB;IAAA,IAApB;MAAE9B;IAAY,CAAC;IACjC,IAAI,CAACzB,eAAe,EAAE;MACpB;IACF;IACA,MAAM8C,OAAO,GAAGrB,WAAW,CAACC,OAAO;IACnC,MAAMqB,OAAO,GAAGtB,WAAW,CAACE,OAAO;IACnC,MAAM6B,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACZ,OAAO,GAAGpD,MAAM,CAACa,OAAO,CAAC;IACjD,MAAMoD,MAAM,GAAGF,IAAI,CAACC,GAAG,CAACX,OAAO,GAAGpD,MAAM,CAACY,OAAO,CAAC;IACjD,MAAMqD,QAAQ,GAAGH,IAAI,CAACI,GAAG,CAACL,MAAM,EAAEG,MAAM,CAAC;IACzClE,UAAU,CAACc,OAAO,CAACuD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEtE,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;IACrFjB,UAAU,CAACc,OAAO,CAACW,YAAY,CAACrC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAE7CY,UAAU,CAACc,OAAO,CAAC+B,SAAS,EAAE;IAC9B7C,UAAU,CAACc,OAAO,CAACwD,GAAG,CAACrE,MAAM,CAACa,OAAO,EAAEZ,MAAM,CAACY,OAAO,EAAEqD,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAGH,IAAI,CAACO,EAAE,CAAC;IAChFvE,UAAU,CAACc,OAAO,CAACkC,MAAM,EAAE;EAE7B,CAAC;EAED,MAAMwB,cAAc,GAAG,SAAqB;IAAA,IAApB;MAAExC;IAAY,CAAC;IACrC,IAAI,CAACzB,eAAe,EAAE;MACpB;IACF;IACAC,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EAED,MAAMiE,iBAAiB,GAAG,UAAqB;IAAA,IAApB;MAAEzC;IAAY,CAAC;IACxC,IAAIvC,MAAM,KAAK,WAAW,EAAE;MAC1BQ,MAAM,CAACa,OAAO,GAAGkB,WAAW,CAACC,OAAO;MACpC/B,MAAM,CAACY,OAAO,GAAGkB,WAAW,CAACE,OAAO;MACpC9C,MAAM,GAAGY,UAAU,CAACc,OAAO,CAACU,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEzB,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;MACjGP,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC;EAED,MAAMgE,YAAY,GAAG,UAAqB;IAAA,IAApB;MAAE1C;IAAY,CAAC;IACnC,IAAI,CAACvB,iBAAiB,EAAE;MACtB;IACF;IACAT,UAAU,CAACc,OAAO,CAACuD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEtE,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;IACrFjB,UAAU,CAACc,OAAO,CAACW,YAAY,CAACrC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAE7CY,UAAU,CAACc,OAAO,CAAC+B,SAAS,EAAE;IAC9B7C,UAAU,CAACc,OAAO,CAACgC,MAAM,CAAC7C,MAAM,CAACa,OAAO,EAAEZ,MAAM,CAACY,OAAO,CAAC;IACzDd,UAAU,CAACc,OAAO,CAACiC,MAAM,CAACf,WAAW,CAACC,OAAO,EAAED,WAAW,CAACE,OAAO,CAAC;IACnElC,UAAU,CAACc,OAAO,CAACiC,MAAM,CAAC9C,MAAM,CAACa,OAAO,GAAG,CAAC,GAAGkB,WAAW,CAACC,OAAO,EAAED,WAAW,CAACE,OAAO,CAAC;IACxFlC,UAAU,CAACc,OAAO,CAACmC,SAAS,EAAE;IAC9BjD,UAAU,CAACc,OAAO,CAACkC,MAAM,EAAE;EAC7B,CAAC;EAED,MAAM2B,gBAAgB,GAAG,UAAqB;IAAA,IAApB;MAAE3C;IAAY,CAAC;IACvC,IAAI,CAACvB,iBAAiB,EAAE;MACtB;IACF;IACAC,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EACD,MAAMkE,OAAO,GAAG,UAAqB;IAAA,IAApB;MAAE5C;IAAY,CAAC;IAC9B,IAAI,CAACrB,YAAY,EAAE;MACjB;IACF;IACAX,UAAU,CAACc,OAAO,CAACuD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEtE,SAAS,CAACe,OAAO,CAACC,KAAK,EAAEhB,SAAS,CAACe,OAAO,CAACG,MAAM,CAAC;IACrFjB,UAAU,CAACc,OAAO,CAACW,YAAY,CAAC9B,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAC7C,MAAMsC,OAAO,GAAGD,WAAW,CAACC,OAAO;IACnC,MAAMC,OAAO,GAAGF,WAAW,CAACE,OAAO;IACnClC,UAAU,CAACc,OAAO,CAAC+D,SAAS,CAACnF,GAAG,EAAEuC,OAAO,GAAGhC,MAAM,CAACa,OAAO,EAAEoB,OAAO,GAAGhC,MAAM,CAACY,OAAO,EAAEjB,QAAQ,EAAEC,SAAS,CAAC;IAE1GkC,WAAW,CAACG,cAAc,EAAE;EAE9B,CAAC;EACD,MAAM2C,eAAe,GAAG,UAAqB;IAAA,IAApB;MAAE9C;IAAY,CAAC;IAEtC,IAAIvC,MAAM,KAAK,KAAK,EAAE;MACpBQ,MAAM,CAACa,OAAO,IAAIkB,WAAW,CAACC,OAAO;MACrC/B,MAAM,CAACY,OAAO,IAAIkB,WAAW,CAACE,OAAO;MACrCtB,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;EACD,MAAMmE,WAAW,GAAG,UAAqB;IAAA,IAApB;MAAE/C;IAAY,CAAC;IAClC,IAAI,CAACrB,YAAY,EAAE;MACjB;IACF;IACA,MAAM;MAAEsB,OAAO;MAAEC;IAAQ,CAAC,GAAGF,WAAW;IACxC/B,MAAM,CAACa,OAAO,IAAImB,OAAO;IACzB/B,MAAM,CAACY,OAAO,IAAIoB,OAAO;IACzBtB,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,SAASkB,cAAc,CAACkD,IAAI,EAAE;IAC5BC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,QAAQF,IAAI,CAACvF,MAAM;MACjB,KAAK,OAAO;QACV4C,cAAc,CAAC2C,IAAI,CAAC1C,EAAE,EAAE0C,IAAI,CAACzC,EAAE,EAAEyC,IAAI,CAACxC,EAAE,EAAEwC,IAAI,CAACvC,EAAE,EAAEuC,IAAI,CAACzF,KAAK,EAAEyF,IAAI,CAACxF,MAAM,CAAC;QAC3E;MACF,KAAK,UAAU;QACbiE,kBAAkB,CAACuB,IAAI,CAAC1C,EAAE,EAAE0C,IAAI,CAACzC,EAAE,EAAEyC,IAAI,CAACxC,EAAE,EAAEwC,IAAI,CAACvC,EAAE,EAAEuC,IAAI,CAACzF,KAAK,EAAEyF,IAAI,CAACxF,MAAM,EAACwF,IAAI,CAACtB,OAAO,CAAC;QAC5F;IAAM;EAGZ;EAGA,MAAMyB,kBAAkB,GAAInD,WAAW,IAAK;IAC1ChC,UAAU,CAACc,OAAO,CAAC6B,WAAW,GAAGpD,KAAK;IACtCS,UAAU,CAACc,OAAO,CAAC8B,SAAS,GAAGpD,MAAM;IACrCuC,YAAY,CAACC,WAAW,CAAC;IACzBmB,kBAAkB,CAACnB,WAAW,CAAC;IAC/B6B,eAAe,CAAC7B,WAAW,CAAC;IAC5ByC,iBAAiB,CAACzC,WAAW,CAAC;IAC9B8C,eAAe,CAAC9C,WAAW,CAAC;EAC9B,CAAC;EAED,MAAMoD,mBAAmB,GAAIpD,WAAW,IAAK;IAC3CI,IAAI,CAACJ,WAAW,CAAC;IACjBoB,aAAa,CAACpB,WAAW,CAAC;IAC1B8B,UAAU,CAAC9B,WAAW,CAAC;IACvB0C,YAAY,CAAC1C,WAAW,CAAC;IACzB4C,OAAO,CAAC5C,WAAW,CAAC;EACtB,CAAC;EAED,MAAMqD,iBAAiB,GAAIrD,WAAW,IAAK;IACzCkB,WAAW,CAAClB,WAAW,CAAC;IACxB4B,YAAY,CAAC5B,WAAW,CAAC;IACzBwC,cAAc,CAACxC,WAAW,CAAC;IAC3B2C,gBAAgB,CAAC3C,WAAW,CAAC;IAC7B+C,WAAW,CAAC/C,WAAW,CAAC;EAC1B,CAAC;EAED,MAAMsD,kBAAkB,GAAItD,WAAW,IAAK;IAC1CkB,WAAW,CAAClB,WAAW,CAAC;IACxB4B,YAAY,CAAC5B,WAAW,CAAC;IACzBwC,cAAc,CAACxC,WAAW,CAAC;IAC3B2C,gBAAgB,CAAC3C,WAAW,CAAC;EAC/B,CAAC;EAED,oBACE;IAAQ,SAAS,EAAC,kBAAkB;IAAC,EAAE,EAAC,SAAS;IAC/C,GAAG,EAAEjC,SAAU;IACf,WAAW,EAAEoF,kBAAmB;IAChC,WAAW,EAAEC,mBAAoB;IACjC,SAAS,EAAEC,iBAAkB;IAC7B,UAAU,EAAEC;EAAmB;IAAA;IAAA;IAAA;EAAA,QAGxB;AAEb,CAAC;AAAA,GAxSKjG,aAAa;AAAA,KAAbA,aAAa;AA0SnB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}