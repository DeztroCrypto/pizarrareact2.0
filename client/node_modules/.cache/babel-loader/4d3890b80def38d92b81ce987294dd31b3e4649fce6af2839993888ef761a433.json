{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\pizarrareact2.0\\\\src\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport { click } from '@testing-library/user-event/dist/click';\nimport { useEffect, useRef, useState } from 'react';\nimport './styles.css';\nimport './w3.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar imdata;\nconst DrawingCanvas = props => {\n  _s();\n  let color = props.color;\n  let grosor = props.grosor;\n  let figura = props.figura;\n  let img = props.img;\n  let newImg = props.newImg;\n  let newWidth = props.newWidth;\n  let newHeight = props.newHeight;\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const startX = useRef(0);\n  const startY = useRef(0);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDrawingRect, setDrawingRect] = useState(false);\n  const [isDrawingCircle, setDrawingCircle] = useState(false);\n  const [isDrawingTriangle, setDrawingTriangle] = useState(false);\n  const [isDrawingImg, setDrawingImg] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const context = canvas.getContext(\"2d\");\n    context.lineCap = \"round\";\n    context.lineJoin = \"round\";\n    contextRef.current = context;\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    let imInit = contextRef.current.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    contextRef.current.putImageData(imInit, 0, 0);\n  }, [window.innerHeight, window.innerWidth]);\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    if (figura === \"linea\") {\n      const {\n        offsetX,\n        offsetY\n      } = nativeEvent;\n      contextRef.current.beginPath();\n      contextRef.current.strokeStyle = color;\n      contextRef.current.lineWidth = grosor;\n      contextRef.current.moveTo(offsetX, offsetY);\n      contextRef.current.lineTo(offsetX, offsetY);\n      contextRef.current.stroke();\n      setIsDrawing(true);\n      nativeEvent.preventDefault();\n    }\n  };\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    if (!isDrawing) {\n      return;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    nativeEvent.preventDefault();\n  };\n  const stopDrawing = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n    if (!isDrawing) {\n      return;\n    }\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n  const startDrawRectangle = _ref4 => {\n    let {\n      nativeEvent\n    } = _ref4;\n    if (figura === \"cuadrado\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);\n      setDrawingRect(true);\n    }\n  };\n  const drawRectangle = _ref5 => {\n    let {\n      nativeEvent\n    } = _ref5;\n    if (!isDrawingRect) {\n      return;\n    }\n    const newPosX = nativeEvent.offsetX;\n    const newPosY = nativeEvent.offsetY;\n    const rectWidth = newPosX - startX.current;\n    const rectHeight = newPosY - startY.current;\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    contextRef.current.putImageData(imdata, 0, 0);\n    contextRef.current.strokeRect(startX.current, startY.current, rectWidth, rectHeight);\n  };\n  const stopDrawRect = _ref6 => {\n    let {\n      nativeEvent\n    } = _ref6;\n    if (!isDrawingRect) {\n      return;\n    }\n    setDrawingRect(false);\n  };\n  const startDrawCircle = _ref7 => {\n    let {\n      nativeEvent\n    } = _ref7;\n    if (figura === \"circulo\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);\n      setDrawingCircle(true);\n    }\n  };\n  const drawCircle = _ref8 => {\n    let {\n      nativeEvent\n    } = _ref8;\n    if (!isDrawingCircle) {\n      return;\n    }\n    const newPosX = nativeEvent.offsetX;\n    const newPosY = nativeEvent.offsetY;\n    const radioX = Math.abs(newPosX - startX.current);\n    const radioY = Math.abs(newPosY - startY.current);\n    const radioMax = Math.max(radioX, radioY);\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    contextRef.current.putImageData(imdata, 0, 0);\n    contextRef.current.beginPath();\n    contextRef.current.arc(startX.current, startY.current, radioMax, 0, 2 * Math.PI);\n    contextRef.current.stroke();\n  };\n  const stopDrawCircle = _ref9 => {\n    let {\n      nativeEvent\n    } = _ref9;\n    if (!isDrawingCircle) {\n      return;\n    }\n    setDrawingCircle(false);\n  };\n  const startDrawTriangle = _ref10 => {\n    let {\n      nativeEvent\n    } = _ref10;\n    if (figura === \"triangulo\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);\n      setDrawingTriangle(true);\n    }\n  };\n  const drawTriangle = _ref11 => {\n    let {\n      nativeEvent\n    } = _ref11;\n    if (!isDrawingTriangle) {\n      return;\n    }\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    contextRef.current.putImageData(imdata, 0, 0);\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(startX.current, startY.current);\n    contextRef.current.lineTo(nativeEvent.offsetX, nativeEvent.offsetY);\n    contextRef.current.lineTo(startX.current * 2 - nativeEvent.offsetX, nativeEvent.offsetY);\n    contextRef.current.closePath();\n    contextRef.current.stroke();\n  };\n  const stopDrawTriangle = _ref12 => {\n    let {\n      nativeEvent\n    } = _ref12;\n    if (!isDrawingTriangle) {\n      return;\n    }\n    setDrawingTriangle(false);\n  };\n  const drawImg = _ref13 => {\n    let {\n      nativeEvent\n    } = _ref13;\n    if (!isDrawingImg) {\n      return;\n    }\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    contextRef.current.putImageData(newImg, 0, 0);\n    const offsetX = nativeEvent.offsetX;\n    const offsetY = nativeEvent.offsetY;\n    contextRef.current.drawImage(img, offsetX + startX.current, offsetY + startY.current, newWidth, newHeight);\n    nativeEvent.preventDefault();\n  };\n  const startDrawingImg = _ref14 => {\n    let {\n      nativeEvent\n    } = _ref14;\n    if (figura === \"img\") {\n      startX.current -= nativeEvent.offsetX;\n      startY.current -= nativeEvent.offsetY;\n      setDrawingImg(true);\n    }\n  };\n  const stopDrawImg = _ref15 => {\n    let {\n      nativeEvent\n    } = _ref15;\n    if (!isDrawingImg) {\n      return;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    startX.current += offsetX;\n    startY.current += offsetY;\n    setDrawingImg(false);\n  };\n  const funcionOnMouseDown = nativeEvent => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    startDrawing(nativeEvent);\n    startDrawRectangle(nativeEvent);\n    startDrawCircle(nativeEvent);\n    startDrawTriangle(nativeEvent);\n    startDrawingImg(nativeEvent);\n  };\n  const functionOnMouseMove = nativeEvent => {\n    draw(nativeEvent);\n    drawRectangle(nativeEvent);\n    drawCircle(nativeEvent);\n    drawTriangle(nativeEvent);\n    drawImg(nativeEvent);\n  };\n  const functionOnMouseUp = nativeEvent => {\n    stopDrawing(nativeEvent);\n    stopDrawRect(nativeEvent);\n    stopDrawCircle(nativeEvent);\n    stopDrawTriangle(nativeEvent);\n    stopDrawImg(nativeEvent);\n  };\n  const functionOnMouseOut = nativeEvent => {\n    stopDrawing(nativeEvent);\n    stopDrawRect(nativeEvent);\n    stopDrawCircle(nativeEvent);\n    stopDrawTriangle(nativeEvent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas-container\",\n    id: \"pizarra\",\n    ref: canvasRef,\n    onMouseDown: funcionOnMouseDown,\n    onMouseMove: functionOnMouseMove,\n    onMouseUp: functionOnMouseUp,\n    onMouseOut: functionOnMouseOut\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"6fA9rfAmPCvl291/MYBSMUFxDrc=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["click","useEffect","useRef","useState","imdata","DrawingCanvas","props","color","grosor","figura","img","newImg","newWidth","newHeight","canvasRef","contextRef","startX","startY","isDrawing","setIsDrawing","isDrawingRect","setDrawingRect","isDrawingCircle","setDrawingCircle","isDrawingTriangle","setDrawingTriangle","isDrawingImg","setDrawingImg","canvas","current","width","clientWidth","height","clientHeight","context","getContext","lineCap","lineJoin","imInit","getImageData","putImageData","window","innerHeight","innerWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","preventDefault","draw","stopDrawing","closePath","startDrawRectangle","drawRectangle","newPosX","newPosY","rectWidth","rectHeight","clearRect","strokeRect","stopDrawRect","startDrawCircle","drawCircle","radioX","Math","abs","radioY","radioMax","max","arc","PI","stopDrawCircle","startDrawTriangle","drawTriangle","stopDrawTriangle","drawImg","drawImage","startDrawingImg","stopDrawImg","funcionOnMouseDown","functionOnMouseMove","functionOnMouseUp","functionOnMouseOut"],"sources":["D:/Web/pizarrareact2.0/src/DrawingCanvas.js"],"sourcesContent":["import { click } from '@testing-library/user-event/dist/click'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport './styles.css'\r\nimport './w3.css'\r\nvar imdata\r\n\r\nconst DrawingCanvas = (props) => {\r\n  let color = props.color\r\n  let grosor = props.grosor\r\n  let figura = props.figura\r\n  let img = props.img\r\n  let newImg = props.newImg\r\n\r\n\r\n  let newWidth = props.newWidth\r\n  let newHeight = props.newHeight\r\n\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  const startX = useRef(0)\r\n  const startY = useRef(0)\r\n\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [isDrawingRect, setDrawingRect] = useState(false);\r\n  const [isDrawingCircle, setDrawingCircle] = useState(false);\r\n  const [isDrawingTriangle, setDrawingTriangle] = useState(false);\r\n  const [isDrawingImg, setDrawingImg] = useState(false);\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    context.lineCap = \"round\";\r\n    context.lineJoin = \"round\";\r\n    contextRef.current = context;\r\n  }, []);\r\n  \r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    let imInit = contextRef.current.getImageData(0, 0, canvas.width, canvas.height)\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n    contextRef.current.putImageData(imInit, 0, 0)\r\n  },[window.innerHeight,window.innerWidth])\r\n\r\n  const startDrawing = ({ nativeEvent }) => {\r\n    if (figura === \"linea\") {\r\n      const { offsetX, offsetY } = nativeEvent;\r\n      contextRef.current.beginPath();\r\n      contextRef.current.strokeStyle = color;\r\n      contextRef.current.lineWidth = grosor;\r\n      contextRef.current.moveTo(offsetX, offsetY);\r\n      contextRef.current.lineTo(offsetX, offsetY);\r\n      contextRef.current.stroke();\r\n      setIsDrawing(true);\r\n      nativeEvent.preventDefault();\r\n    }\r\n  };\r\n  const draw = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.lineTo(offsetX, offsetY);\r\n    contextRef.current.stroke();\r\n    nativeEvent.preventDefault();\r\n  };\r\n\r\n  const stopDrawing = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    contextRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  const startDrawRectangle = ({ nativeEvent }) => {\r\n    if (figura === \"cuadrado\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      setDrawingRect(true)\r\n    }\r\n  }\r\n\r\n  const drawRectangle = ({ nativeEvent }) => {\r\n    if (!isDrawingRect) {\r\n      return\r\n    }\r\n    const newPosX = nativeEvent.offsetX\r\n    const newPosY = nativeEvent.offsetY\r\n    const rectWidth = newPosX - startX.current\r\n    const rectHeight = newPosY - startY.current\r\n\r\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n    contextRef.current.putImageData(imdata, 0, 0)\r\n    contextRef.current.strokeRect(startX.current, startY.current, rectWidth, rectHeight)\r\n\r\n  }\r\n\r\n  const stopDrawRect = ({ nativeEvent }) => {\r\n    if (!isDrawingRect) {\r\n      return\r\n    }\r\n    setDrawingRect(false)\r\n  }\r\n\r\n  const startDrawCircle = ({ nativeEvent }) => {\r\n    if (figura === \"circulo\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n\r\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      setDrawingCircle(true)\r\n    }\r\n  }\r\n\r\n  const drawCircle = ({ nativeEvent }) => {\r\n    if (!isDrawingCircle) {\r\n      return\r\n    }\r\n    const newPosX = nativeEvent.offsetX\r\n    const newPosY = nativeEvent.offsetY\r\n    const radioX = Math.abs(newPosX - startX.current)\r\n    const radioY = Math.abs(newPosY - startY.current)\r\n    const radioMax = Math.max(radioX, radioY)\r\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n    contextRef.current.putImageData(imdata, 0, 0)\r\n\r\n    contextRef.current.beginPath()\r\n    contextRef.current.arc(startX.current, startY.current, radioMax, 0, 2 * Math.PI)\r\n    contextRef.current.stroke()\r\n\r\n  }\r\n\r\n  const stopDrawCircle = ({ nativeEvent }) => {\r\n    if (!isDrawingCircle) {\r\n      return\r\n    }\r\n    setDrawingCircle(false)\r\n  }\r\n\r\n  const startDrawTriangle = ({ nativeEvent }) => {\r\n    if (figura === \"triangulo\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = contextRef.current.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      setDrawingTriangle(true)\r\n    }\r\n  }\r\n\r\n  const drawTriangle = ({ nativeEvent }) => {\r\n    if (!isDrawingTriangle) {\r\n      return\r\n    }\r\n    contextRef.current.clearRect(0, 0,canvasRef.current.width, canvasRef.current.height);\r\n    contextRef.current.putImageData(imdata, 0, 0)\r\n\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(startX.current, startY.current);\r\n    contextRef.current.lineTo(nativeEvent.offsetX, nativeEvent.offsetY);\r\n    contextRef.current.lineTo(startX.current * 2 - nativeEvent.offsetX, nativeEvent.offsetY);\r\n    contextRef.current.closePath();\r\n    contextRef.current.stroke();\r\n  }\r\n\r\n  const stopDrawTriangle = ({nativeEvent}) => {\r\n    if (!isDrawingTriangle) {\r\n      return\r\n    }\r\n    setDrawingTriangle(false)\r\n  }\r\n  const drawImg = ({nativeEvent}) => {\r\n    if (!isDrawingImg) {\r\n      return\r\n    }\r\n    contextRef.current.clearRect(0, 0,canvasRef.current.width, canvasRef.current.height);\r\n    contextRef.current.putImageData(newImg, 0, 0)\r\n    const offsetX = nativeEvent.offsetX\r\n    const offsetY = nativeEvent.offsetY\r\n    contextRef.current.drawImage(img,offsetX+startX.current, offsetY+ startY.current,newWidth,newHeight)\r\n    \r\n    nativeEvent.preventDefault();\r\n\r\n  }\r\n  const startDrawingImg = ({nativeEvent}) => {\r\n\r\n    if (figura === \"img\") {\r\n      startX.current -= nativeEvent.offsetX\r\n      startY.current -= nativeEvent.offsetY\r\n      setDrawingImg(true)\r\n    }    \r\n  }\r\n  const stopDrawImg = ({nativeEvent}) => {\r\n    if (!isDrawingImg) {\r\n      return\r\n    }    \r\n    const { offsetX, offsetY } = nativeEvent;\r\n    startX.current += offsetX\r\n    startY.current += offsetY\r\n    setDrawingImg(false)\r\n  }\r\n\r\n\r\n  const funcionOnMouseDown = (nativeEvent) => {\r\n    contextRef.current.strokeStyle = color\r\n    contextRef.current.lineWidth = grosor\r\n    startDrawing(nativeEvent)\r\n    startDrawRectangle(nativeEvent)\r\n    startDrawCircle(nativeEvent)\r\n    startDrawTriangle(nativeEvent)\r\n    startDrawingImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseMove = (nativeEvent) => {\r\n    draw(nativeEvent)\r\n    drawRectangle(nativeEvent)\r\n    drawCircle(nativeEvent)\r\n    drawTriangle(nativeEvent)\r\n    drawImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseUp = (nativeEvent) => {\r\n    stopDrawing(nativeEvent)\r\n    stopDrawRect(nativeEvent)\r\n    stopDrawCircle(nativeEvent)\r\n    stopDrawTriangle(nativeEvent)\r\n    stopDrawImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseOut = (nativeEvent) => {\r\n    stopDrawing(nativeEvent)\r\n    stopDrawRect(nativeEvent)\r\n    stopDrawCircle(nativeEvent)\r\n    stopDrawTriangle(nativeEvent)\r\n  }\r\n\r\n  return (\r\n    <canvas className=\"canvas-container\" id='pizarra'\r\n      ref={canvasRef}\r\n      onMouseDown={funcionOnMouseDown}\r\n      onMouseMove={functionOnMouseMove}\r\n      onMouseUp={functionOnMouseUp}\r\n      onMouseOut={functionOnMouseOut}\r\n      >\r\n      \r\n    </canvas>\r\n  )\r\n}\r\n\r\nexport default DrawingCanvas"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}