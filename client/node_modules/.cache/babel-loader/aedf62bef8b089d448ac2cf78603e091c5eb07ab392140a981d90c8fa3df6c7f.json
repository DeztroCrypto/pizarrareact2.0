{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\pizarrareact2.0\\\\client\\\\src\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport { click } from '@testing-library/user-event/dist/click';\nimport { useEffect, useRef, useState } from 'react';\nimport './styles.css';\nimport './w3.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar imdata;\nconst DrawingCanvas = props => {\n  _s();\n  let color = props.color;\n  let grosor = props.grosor;\n  let figura = props.figura;\n  let img = props.img;\n  let newImg = props.newImg;\n  let socket = props.socket;\n  let newWidth = props.newWidth;\n  let newHeight = props.newHeight;\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const startX = useRef(0);\n  const startY = useRef(0);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDrawingRect, setDrawingRect] = useState(false);\n  const [isDrawingCircle, setDrawingCircle] = useState(false);\n  const [isDrawingTriangle, setDrawingTriangle] = useState(false);\n  const [isDrawingImg, setDrawingImg] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    const context = canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    });\n    context.lineCap = \"round\";\n    context.lineJoin = \"round\";\n    contextRef.current = context;\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    let imInit = contextRef.current.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    contextRef.current.putImageData(imInit, 0, 0);\n  }, [window.innerHeight, window.innerWidth]);\n  socket.on('drawing', onDrawingEvent);\n  socket.on('cargarCanvas', cargarCanvas);\n  const cargarCanvas = () => {};\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    if (figura === \"linea\") {\n      const {\n        offsetX,\n        offsetY\n      } = nativeEvent;\n      startX.current = offsetX;\n      startY.current = offsetY;\n      setIsDrawing(true);\n      nativeEvent.preventDefault();\n    }\n  };\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    if (!isDrawing) {\n      return;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    socketDrawLine(startX.current, startY.current, offsetX, offsetY, color, grosor, true);\n    startX.current = offsetX;\n    startY.current = offsetY;\n    nativeEvent.preventDefault();\n  };\n  const socketDrawLine = (x0, y0, x1, y1, color, grosor, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(x0, y0);\n    contextRef.current.lineTo(x1, y1);\n    contextRef.current.stroke();\n    contextRef.current.closePath();\n    const imgData = canvasRef.current.toDataURL();\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      x1,\n      y1,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawing = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n    if (!isDrawing) {\n      return;\n    }\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n  const startDrawRectangle = _ref4 => {\n    let {\n      nativeEvent\n    } = _ref4;\n    if (figura === \"cuadrado\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = canvasRef.current.toDataURL();\n      setDrawingRect(true);\n    }\n  };\n  const drawRectangle = _ref5 => {\n    let {\n      nativeEvent\n    } = _ref5;\n    if (!isDrawingRect) {\n      return;\n    }\n    const newPosX = nativeEvent.offsetX;\n    const newPosY = nativeEvent.offsetY;\n    const rectWidth = newPosX - startX.current;\n    const rectHeight = newPosY - startY.current;\n    socketDrawCuadrado(startX.current, startY.current, rectWidth, rectHeight, color, grosor, imdata, true);\n  };\n  const socketDrawCuadrado = (x0, y0, x1, y1, color, grosor, imgData, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    const imagen = new Image();\n    imagen.onload = () => {\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      contextRef.current.drawImage(imagen, 0, 0);\n      contextRef.current.strokeRect(x0, y0, x1, y1);\n    };\n    imagen.src = imgData;\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      x1,\n      y1,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawRect = _ref6 => {\n    let {\n      nativeEvent\n    } = _ref6;\n    if (!isDrawingRect) {\n      return;\n    }\n    setDrawingRect(false);\n  };\n  const startDrawCircle = _ref7 => {\n    let {\n      nativeEvent\n    } = _ref7;\n    if (figura === \"circulo\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = canvasRef.current.toDataURL();\n      setDrawingCircle(true);\n    }\n  };\n  const drawCircle = _ref8 => {\n    let {\n      nativeEvent\n    } = _ref8;\n    if (!isDrawingCircle) {\n      return;\n    }\n    const newPosX = nativeEvent.offsetX;\n    const newPosY = nativeEvent.offsetY;\n    const radioX = Math.abs(newPosX - startX.current);\n    const radioY = Math.abs(newPosY - startY.current);\n    const radioMax = Math.max(radioX, radioY);\n    socketDrawCicrulo(startX.current, startY.current, radioMax, color, grosor, imdata, true);\n  };\n  const socketDrawCicrulo = (x0, y0, radio, color, grosor, imgData, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    const imagen = new Image();\n    imagen.onload = () => {\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      contextRef.current.drawImage(imagen, 0, 0);\n      contextRef.current.beginPath();\n      contextRef.current.arc(x0, y0, radio, 0, 2 * Math.PI);\n      contextRef.current.stroke();\n    };\n    imagen.src = imgData;\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      radio,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawCircle = _ref9 => {\n    let {\n      nativeEvent\n    } = _ref9;\n    if (!isDrawingCircle) {\n      return;\n    }\n    setDrawingCircle(false);\n  };\n  const startDrawTriangle = _ref10 => {\n    let {\n      nativeEvent\n    } = _ref10;\n    if (figura === \"triangulo\") {\n      startX.current = nativeEvent.offsetX;\n      startY.current = nativeEvent.offsetY;\n      imdata = canvasRef.current.toDataURL();\n      setDrawingTriangle(true);\n    }\n  };\n  const drawTriangle = _ref11 => {\n    let {\n      nativeEvent\n    } = _ref11;\n    if (!isDrawingTriangle) {\n      return;\n    }\n    const vertice = startX.current * 2 - nativeEvent.offsetX;\n    socketDrawTriangulo(startX.current, startY.current, nativeEvent.offsetX, vertice, nativeEvent.offsetY, color, grosor, imdata, true);\n  };\n  const socketDrawTriangulo = (x0, y0, x1, x2, altura, color, grosor, imgData, emit) => {\n    contextRef.current.strokeStyle = color;\n    contextRef.current.lineWidth = grosor;\n    const imagen = new Image();\n    console.log(imgData);\n    imagen.onload = () => {\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      contextRef.current.drawImage(imagen, 0, 0);\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(x0, y0);\n      contextRef.current.lineTo(x1, altura);\n      contextRef.current.lineTo(x2, altura);\n      contextRef.current.closePath();\n      contextRef.current.stroke();\n    };\n    imagen.src = imgData;\n    if (!emit) {\n      return;\n    }\n    socket.emit('drawing', {\n      x0,\n      y0,\n      x1,\n      x2,\n      altura,\n      color,\n      grosor,\n      imgData,\n      figura\n    });\n  };\n  const stopDrawTriangle = _ref12 => {\n    let {\n      nativeEvent\n    } = _ref12;\n    if (!isDrawingTriangle) {\n      return;\n    }\n    setDrawingTriangle(false);\n  };\n  const drawImg = _ref13 => {\n    let {\n      nativeEvent\n    } = _ref13;\n    if (!isDrawingImg) {\n      return;\n    }\n    const image = new Image();\n    image.src = newImg;\n    image.onload = () => {\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      contextRef.current.drawImage(image, 0, 0, canvasRef.current.width, canvasRef.current.height);\n      const offsetX = nativeEvent.offsetX;\n      const offsetY = nativeEvent.offsetY;\n      contextRef.current.drawImage(img, offsetX + startX.current, offsetY + startY.current, newWidth, newHeight);\n    };\n    nativeEvent.preventDefault();\n  };\n  const socketDrawImage = () => {};\n  const startDrawingImg = _ref14 => {\n    let {\n      nativeEvent\n    } = _ref14;\n    if (figura === \"img\") {\n      startX.current -= nativeEvent.offsetX;\n      startY.current -= nativeEvent.offsetY;\n      setDrawingImg(true);\n    }\n  };\n  const stopDrawImg = _ref15 => {\n    let {\n      nativeEvent\n    } = _ref15;\n    if (!isDrawingImg) {\n      return;\n    }\n    startX.current += nativeEvent.offsetX;\n    startY.current += nativeEvent.offsetY;\n    setDrawingImg(false);\n  };\n  function onDrawingEvent(data) {\n    switch (data.figura) {\n      case 'linea':\n        socketDrawLine(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor);\n        break;\n      case 'cuadrado':\n        socketDrawCuadrado(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor, data.imgData);\n        break;\n      case 'circulo':\n        socketDrawCicrulo(data.x0, data.y0, data.radio, data.color, data.grosor, data.imgData);\n        break;\n      case 'triangulo':\n        socketDrawTriangulo(data.x0, data.y0, data.x1, data.x2, data.altura, data.color, data.grosor, data.imgData);\n        break;\n      case 'img':\n        socketDrawImage();\n    }\n  }\n  const funcionOnMouseDown = nativeEvent => {\n    startDrawing(nativeEvent);\n    startDrawRectangle(nativeEvent);\n    startDrawCircle(nativeEvent);\n    startDrawTriangle(nativeEvent);\n    startDrawingImg(nativeEvent);\n  };\n  const functionOnMouseMove = nativeEvent => {\n    draw(nativeEvent);\n    drawRectangle(nativeEvent);\n    drawCircle(nativeEvent);\n    drawTriangle(nativeEvent);\n    drawImg(nativeEvent);\n  };\n  const functionOnMouseUp = nativeEvent => {\n    stopDrawing(nativeEvent);\n    stopDrawRect(nativeEvent);\n    stopDrawCircle(nativeEvent);\n    stopDrawTriangle(nativeEvent);\n    stopDrawImg(nativeEvent);\n  };\n  const functionOnMouseOut = nativeEvent => {\n    stopDrawing(nativeEvent);\n    stopDrawRect(nativeEvent);\n    stopDrawCircle(nativeEvent);\n    stopDrawTriangle(nativeEvent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas-container\",\n    id: \"pizarra\",\n    ref: canvasRef,\n    onMouseDown: funcionOnMouseDown,\n    onMouseMove: functionOnMouseMove,\n    onMouseUp: functionOnMouseUp,\n    onMouseOut: functionOnMouseOut\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"6fA9rfAmPCvl291/MYBSMUFxDrc=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["click","useEffect","useRef","useState","imdata","DrawingCanvas","props","color","grosor","figura","img","newImg","socket","newWidth","newHeight","canvasRef","contextRef","startX","startY","isDrawing","setIsDrawing","isDrawingRect","setDrawingRect","isDrawingCircle","setDrawingCircle","isDrawingTriangle","setDrawingTriangle","isDrawingImg","setDrawingImg","canvas","current","width","clientWidth","height","clientHeight","context","getContext","willReadFrequently","lineCap","lineJoin","imInit","getImageData","putImageData","window","innerHeight","innerWidth","on","onDrawingEvent","cargarCanvas","startDrawing","nativeEvent","offsetX","offsetY","preventDefault","draw","socketDrawLine","x0","y0","x1","y1","emit","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","imgData","toDataURL","stopDrawing","startDrawRectangle","drawRectangle","newPosX","newPosY","rectWidth","rectHeight","socketDrawCuadrado","imagen","Image","onload","clearRect","drawImage","strokeRect","src","stopDrawRect","startDrawCircle","drawCircle","radioX","Math","abs","radioY","radioMax","max","socketDrawCicrulo","radio","arc","PI","stopDrawCircle","startDrawTriangle","drawTriangle","vertice","socketDrawTriangulo","x2","altura","console","log","stopDrawTriangle","drawImg","image","socketDrawImage","startDrawingImg","stopDrawImg","data","funcionOnMouseDown","functionOnMouseMove","functionOnMouseUp","functionOnMouseOut"],"sources":["D:/Web/pizarrareact2.0/client/src/DrawingCanvas.js"],"sourcesContent":["import { click } from '@testing-library/user-event/dist/click'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport './styles.css'\r\nimport './w3.css'\r\nvar imdata\r\n\r\nconst DrawingCanvas = (props) => {\r\n  let color = props.color\r\n  let grosor = props.grosor\r\n  let figura = props.figura\r\n  let img = props.img\r\n  let newImg = props.newImg\r\n  let socket = props.socket\r\n\r\n  let newWidth = props.newWidth\r\n  let newHeight = props.newHeight\r\n\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  const startX = useRef(0)\r\n  const startY = useRef(0)\r\n\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [isDrawingRect, setDrawingRect] = useState(false);\r\n  const [isDrawingCircle, setDrawingCircle] = useState(false);\r\n  const [isDrawingTriangle, setDrawingTriangle] = useState(false);\r\n  const [isDrawingImg, setDrawingImg] = useState(false);\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n\r\n    const context = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n    context.lineCap = \"round\";\r\n    context.lineJoin = \"round\";\r\n    contextRef.current = context;\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    let imInit = contextRef.current.getImageData(0, 0, canvas.width, canvas.height)\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n    contextRef.current.putImageData(imInit, 0, 0)\r\n  }, [window.innerHeight, window.innerWidth])\r\n\r\n  socket.on('drawing', onDrawingEvent)\r\n  socket.on('cargarCanvas',cargarCanvas)\r\n\r\n  const cargarCanvas = () =>{\r\n    \r\n  }\r\n\r\n  const startDrawing = ({ nativeEvent }) => {\r\n    if (figura === \"linea\") {\r\n      const { offsetX, offsetY } = nativeEvent;\r\n      startX.current = offsetX;\r\n      startY.current = offsetY\r\n      setIsDrawing(true);\r\n      nativeEvent.preventDefault();\r\n    }\r\n  };\r\n  const draw = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    socketDrawLine(startX.current, startY.current, offsetX, offsetY, color, grosor, true)\r\n    startX.current = offsetX\r\n    startY.current = offsetY\r\n    nativeEvent.preventDefault();\r\n  };\r\n\r\n  const socketDrawLine = (x0, y0, x1, y1, color, grosor, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(x0, y0)\r\n    contextRef.current.lineTo(x1, y1)\r\n    contextRef.current.stroke()\r\n    contextRef.current.closePath()\r\n    const imgData = canvasRef.current.toDataURL()\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      x1,\r\n      y1,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawing = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    contextRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  const startDrawRectangle = ({ nativeEvent }) => {\r\n    if (figura === \"cuadrado\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = canvasRef.current.toDataURL()\r\n      setDrawingRect(true)\r\n    }\r\n  }\r\n\r\n  const drawRectangle = ({ nativeEvent }) => {\r\n    if (!isDrawingRect) {\r\n      return\r\n    }\r\n    const newPosX = nativeEvent.offsetX\r\n    const newPosY = nativeEvent.offsetY\r\n    const rectWidth = newPosX - startX.current\r\n    const rectHeight = newPosY - startY.current\r\n    socketDrawCuadrado(startX.current, startY.current, rectWidth, rectHeight, color, grosor, imdata, true)\r\n  }\r\n\r\n  const socketDrawCuadrado = (x0, y0, x1, y1, color, grosor, imgData, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    const imagen = new Image\r\n    imagen.onload = () => {\r\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      contextRef.current.drawImage(imagen, 0, 0)\r\n      contextRef.current.strokeRect(x0, y0, x1, y1)\r\n    }\r\n    imagen.src = imgData\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      x1,\r\n      y1,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawRect = ({ nativeEvent }) => {\r\n    if (!isDrawingRect) {\r\n      return\r\n    }\r\n    setDrawingRect(false)\r\n  }\r\n\r\n  const startDrawCircle = ({ nativeEvent }) => {\r\n    if (figura === \"circulo\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = canvasRef.current.toDataURL()\r\n      setDrawingCircle(true)\r\n    }\r\n  }\r\n\r\n  const drawCircle = ({ nativeEvent }) => {\r\n    if (!isDrawingCircle) {\r\n      return\r\n    }\r\n    const newPosX = nativeEvent.offsetX\r\n    const newPosY = nativeEvent.offsetY\r\n    const radioX = Math.abs(newPosX - startX.current)\r\n    const radioY = Math.abs(newPosY - startY.current)\r\n    const radioMax = Math.max(radioX, radioY)\r\n    socketDrawCicrulo(startX.current, startY.current, radioMax, color, grosor, imdata, true)\r\n  }\r\n\r\n  const socketDrawCicrulo = (x0, y0, radio, color, grosor, imgData, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    const imagen = new Image\r\n    imagen.onload = () => {\r\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      contextRef.current.drawImage(imagen, 0, 0)\r\n      contextRef.current.beginPath()\r\n      contextRef.current.arc(x0, y0, radio, 0, 2 * Math.PI)\r\n      contextRef.current.stroke()\r\n    }\r\n    imagen.src = imgData\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      radio,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawCircle = ({ nativeEvent }) => {\r\n    if (!isDrawingCircle) {\r\n      return\r\n    }\r\n    setDrawingCircle(false)\r\n  }\r\n\r\n  const startDrawTriangle = ({ nativeEvent }) => {\r\n    if (figura === \"triangulo\") {\r\n      startX.current = nativeEvent.offsetX\r\n      startY.current = nativeEvent.offsetY\r\n      imdata = canvasRef.current.toDataURL()\r\n      setDrawingTriangle(true)\r\n    }\r\n  }\r\n\r\n  const drawTriangle = ({ nativeEvent }) => {\r\n    if (!isDrawingTriangle) {\r\n      return\r\n    }\r\n    const vertice = startX.current * 2 - nativeEvent.offsetX\r\n    socketDrawTriangulo(startX.current, startY.current, nativeEvent.offsetX, vertice, nativeEvent.offsetY, color, grosor, imdata, true)\r\n\r\n  }\r\n\r\n  const socketDrawTriangulo = (x0, y0, x1, x2, altura, color, grosor, imgData, emit) => {\r\n    contextRef.current.strokeStyle = color;\r\n    contextRef.current.lineWidth = grosor;\r\n    const imagen = new Image\r\n    console.log(imgData)\r\n    imagen.onload = () => {\r\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      contextRef.current.drawImage(imagen, 0, 0)\r\n      contextRef.current.beginPath();\r\n      contextRef.current.moveTo(x0, y0);\r\n      contextRef.current.lineTo(x1, altura);\r\n      contextRef.current.lineTo(x2, altura);\r\n      contextRef.current.closePath();\r\n      contextRef.current.stroke();\r\n    }\r\n    imagen.src = imgData\r\n    if (!emit) {\r\n      return\r\n    }\r\n    socket.emit('drawing', {\r\n      x0,\r\n      y0,\r\n      x1,\r\n      x2,\r\n      altura,\r\n      color,\r\n      grosor,\r\n      imgData,\r\n      figura\r\n    })\r\n  }\r\n\r\n  const stopDrawTriangle = ({ nativeEvent }) => {\r\n    if (!isDrawingTriangle) {\r\n      return\r\n    }\r\n    setDrawingTriangle(false)\r\n  }\r\n\r\n  const drawImg = ({ nativeEvent }) => {\r\n    if (!isDrawingImg) {\r\n      return\r\n    }\r\n    const image = new Image\r\n    image.src = newImg\r\n    image.onload = () => {\r\n      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      contextRef.current.drawImage(image, 0, 0, canvasRef.current.width, canvasRef.current.height)\r\n      const offsetX = nativeEvent.offsetX\r\n      const offsetY = nativeEvent.offsetY\r\n      contextRef.current.drawImage(img, offsetX + startX.current, offsetY + startY.current, newWidth, newHeight)\r\n    }\r\n    nativeEvent.preventDefault();\r\n  }\r\n\r\n  const socketDrawImage = () => {\r\n\r\n  }\r\n\r\n  const startDrawingImg = ({ nativeEvent }) => {\r\n\r\n    if (figura === \"img\") {\r\n      startX.current -= nativeEvent.offsetX\r\n      startY.current -= nativeEvent.offsetY\r\n      setDrawingImg(true)\r\n    }\r\n  }\r\n  const stopDrawImg = ({ nativeEvent }) => {\r\n    if (!isDrawingImg) {\r\n      return\r\n    }\r\n    startX.current += nativeEvent.offsetX\r\n    startY.current += nativeEvent.offsetY\r\n    setDrawingImg(false)\r\n  }\r\n\r\n  function onDrawingEvent(data) {\r\n    switch (data.figura) {\r\n      case 'linea':\r\n        socketDrawLine(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor);\r\n        break;\r\n      case 'cuadrado':\r\n        socketDrawCuadrado(data.x0, data.y0, data.x1, data.y1, data.color, data.grosor, data.imgData)\r\n        break;\r\n      case 'circulo':\r\n        socketDrawCicrulo(data.x0, data.y0, data.radio, data.color, data.grosor, data.imgData)\r\n        break;\r\n      case 'triangulo':\r\n        socketDrawTriangulo(data.x0, data.y0, data.x1, data.x2, data.altura, data.color, data.grosor, data.imgData)\r\n        break;\r\n      case 'img':\r\n        socketDrawImage()\r\n    }\r\n  }\r\n\r\n  const funcionOnMouseDown = (nativeEvent) => {\r\n    startDrawing(nativeEvent)\r\n    startDrawRectangle(nativeEvent)\r\n    startDrawCircle(nativeEvent)\r\n    startDrawTriangle(nativeEvent)\r\n    startDrawingImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseMove = (nativeEvent) => {\r\n    draw(nativeEvent)\r\n    drawRectangle(nativeEvent)\r\n    drawCircle(nativeEvent)\r\n    drawTriangle(nativeEvent)\r\n    drawImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseUp = (nativeEvent) => {\r\n    stopDrawing(nativeEvent)\r\n    stopDrawRect(nativeEvent)\r\n    stopDrawCircle(nativeEvent)\r\n    stopDrawTriangle(nativeEvent)\r\n    stopDrawImg(nativeEvent)\r\n  }\r\n\r\n  const functionOnMouseOut = (nativeEvent) => {\r\n    stopDrawing(nativeEvent)\r\n    stopDrawRect(nativeEvent)\r\n    stopDrawCircle(nativeEvent)\r\n    stopDrawTriangle(nativeEvent)\r\n  }\r\n\r\n  return (\r\n    <canvas className=\"canvas-container\" id='pizarra'\r\n      ref={canvasRef}\r\n      onMouseDown={funcionOnMouseDown}\r\n      onMouseMove={functionOnMouseMove}\r\n      onMouseUp={functionOnMouseUp}\r\n      onMouseOut={functionOnMouseOut}\r\n    >\r\n    </canvas>\r\n  )\r\n}\r\n\r\nexport default DrawingCanvas"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}